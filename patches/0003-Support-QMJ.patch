From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: tibs <git@tibinonest.me>
Date: Wed, 1 Feb 2023 17:13:57 -0500
Subject: [PATCH] Support QMJ


diff --git a/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java b/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java
index 1eef6031d6538a716eb06f39dea8e19319d31d2d..10243d5dde6c42c283016813376200867a8067c8 100644
--- a/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java
+++ b/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java
@@ -148,10 +148,10 @@ public interface LoomGradleExtensionAPI {
 	void disableDeprecatedPomGeneration(MavenPublication publication);
 
 	/**
-	 * Reads the mod version from the fabric.mod.json file located in the main sourcesets resources.
-	 * This is useful if you want to set the gradle version based of the version in the fabric.mod.json file.
+	 * Reads the mod version from the mod metadata file located in the main sourcesets resources.
+	 * This is useful if you want to set the gradle version based of the version in the mod metadata file.
 	 *
-	 * @return the version defined in the fabric.mod.json
+	 * @return the version defined in the mod metadata file
 	 */
 	String getModVersion();
 
diff --git a/src/main/java/net/fabricmc/loom/api/metadata/ModJson.java b/src/main/java/net/fabricmc/loom/api/metadata/ModJson.java
new file mode 100644
index 0000000000000000000000000000000000000000..ba3ae3d91cc89b63342d2dda5e373db409a477bc
--- /dev/null
+++ b/src/main/java/net/fabricmc/loom/api/metadata/ModJson.java
@@ -0,0 +1,58 @@
+/*
+ * This file is part of fabric-loom, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2022 FabricMC
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+package net.fabricmc.loom.api.metadata;
+
+import java.util.List;
+import java.util.Map;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.Nullable;
+
+import net.fabricmc.loom.configuration.metadata.ModEnvironment;
+import net.fabricmc.loom.util.metadata.ModJsonSource;
+
+@ApiStatus.Experimental
+public interface ModJson {
+	String getId();
+	String getModVersion();
+	@Nullable
+	String getModName();
+
+	List<String> getMixinConfigurations();
+
+	Map<String, ModEnvironment> getClassTweakers();
+
+	@Nullable
+	JsonElement getInjectedInterfaces();
+
+	ModJsonSource getSource();
+
+	@Nullable
+	String getProvidedJavadocPath();
+	JsonObject stripNestedJars(JsonObject json);
+	JsonObject addNestedJars(JsonObject json, List<String> files);
+}
diff --git a/src/main/java/net/fabricmc/loom/api/processor/SpecContext.java b/src/main/java/net/fabricmc/loom/api/processor/SpecContext.java
index e0480168c7231e6a3ab09dd1d1e0beccc679c9a3..af78c5ee1cb008ad7a08a66291555413c2027779 100644
--- a/src/main/java/net/fabricmc/loom/api/processor/SpecContext.java
+++ b/src/main/java/net/fabricmc/loom/api/processor/SpecContext.java
@@ -27,17 +27,17 @@ package net.fabricmc.loom.api.processor;
 import java.util.List;
 import java.util.stream.Stream;
 
-import net.fabricmc.loom.util.fmj.FabricModJson;
+import net.fabricmc.loom.api.metadata.ModJson;
 
 public interface SpecContext {
-	List<FabricModJson> modDependencies();
+	List<ModJson> modDependencies();
 
-	List<FabricModJson> localMods();
+	List<ModJson> localMods();
 
 	// Returns mods that are both on the compile and runtime classpath
-	List<FabricModJson> modDependenciesCompileRuntime();
+	List<ModJson> modDependenciesCompileRuntime();
 
-	default List<FabricModJson> allMods() {
+	default List<ModJson> allMods() {
 		return Stream.concat(modDependencies().stream(), localMods().stream()).toList();
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/build/nesting/IncludedJarFactory.java b/src/main/java/net/fabricmc/loom/build/nesting/IncludedJarFactory.java
index 43bffc29378f65c40fb46b4c23adecc44428c0ee..7b0758fcf3344b816663b627ae2731bdf8c2e02e 100644
--- a/src/main/java/net/fabricmc/loom/build/nesting/IncludedJarFactory.java
+++ b/src/main/java/net/fabricmc/loom/build/nesting/IncludedJarFactory.java
@@ -56,9 +56,9 @@ import org.slf4j.LoggerFactory;
 
 import net.fabricmc.loom.LoomGradleExtension;
 import net.fabricmc.loom.LoomGradlePlugin;
+import net.fabricmc.loom.configuration.metadata.ModMetadataHelper;
 import net.fabricmc.loom.task.RemapTaskConfiguration;
 import net.fabricmc.loom.util.ZipReprocessorUtil;
-import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
 
 public final class IncludedJarFactory {
 	private final Project project;
@@ -150,7 +150,7 @@ public final class IncludedJarFactory {
 	}
 
 	private File getNestableJar(final File input, final Metadata metadata) {
-		if (FabricModJsonFactory.isModJar(input)) {
+		if (ModMetadataHelper.isModJar(input)) {
 			// Input is a mod, nothing needs to be done.
 			return input;
 		}
@@ -165,7 +165,7 @@ public final class IncludedJarFactory {
 
 		File tempFile = new File(tempDir, input.getName());
 
-		if (tempFile.exists() && FabricModJsonFactory.isModJar(tempFile)) {
+		if (tempFile.exists() && ModMetadataHelper.isModJar(tempFile)) {
 			return tempFile;
 		}
 
diff --git a/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java b/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java
index e495d6a8351132b1e8b89a7f20b3ecc60f7f8d7f..b8754bba15be33c5ecc1b0837d923d445cef8e38 100644
--- a/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java
+++ b/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java
@@ -27,20 +27,21 @@ package net.fabricmc.loom.build.nesting;
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.List;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 import com.google.common.base.Preconditions;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import org.gradle.api.UncheckedIOException;
 import org.slf4j.Logger;
 
+import net.fabricmc.loom.configuration.metadata.ModMetadataHelper;
 import net.fabricmc.loom.util.Pair;
 import net.fabricmc.loom.util.ZipUtils;
-import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
 
 public class JarNester {
 	public static void nestJars(Collection<File> jars, File modJar, Logger logger) {
@@ -49,7 +50,14 @@ public class JarNester {
 			return;
 		}
 
-		Preconditions.checkArgument(FabricModJsonFactory.isModJar(modJar), "Cannot nest jars into none mod jar " + modJar.getName());
+		Preconditions.checkArgument(ModMetadataHelper.isModJar(modJar), "Cannot nest jars into non-mod jar " + modJar.getName());
+		List<String> files = new ArrayList<>();
+
+		for (File file : jars) {
+			String nestedJarPath = "META-INF/jars/" + file.getName();
+			Preconditions.checkArgument(ModMetadataHelper.isModJar(file), "Cannot nest non-mod jar: " + file.getName());
+			files.add(nestedJarPath);
+		}
 
 		try {
 			ZipUtils.add(modJar.toPath(), jars.stream().map(file -> {
@@ -60,38 +68,9 @@ public class JarNester {
 				}
 			}).collect(Collectors.toList()));
 
-			int count = ZipUtils.transformJson(JsonObject.class, modJar.toPath(), Stream.of(new Pair<>("fabric.mod.json", json -> {
-				JsonArray nestedJars = json.getAsJsonArray("jars");
-
-				if (nestedJars == null || !json.has("jars")) {
-					nestedJars = new JsonArray();
-				}
-
-				for (File file : jars) {
-					String nestedJarPath = "META-INF/jars/" + file.getName();
-					Preconditions.checkArgument(FabricModJsonFactory.isModJar(file), "Cannot nest none mod jar: " + file.getName());
-
-					for (JsonElement nestedJar : nestedJars) {
-						JsonObject jsonObject = nestedJar.getAsJsonObject();
-
-						if (jsonObject.has("file") && jsonObject.get("file").getAsString().equals(nestedJarPath)) {
-							throw new IllegalStateException("Cannot nest 2 jars at the same path: " + nestedJarPath);
-						}
-					}
-
-					JsonObject jsonObject = new JsonObject();
-					jsonObject.addProperty("file", nestedJarPath);
-					nestedJars.add(jsonObject);
-
-					logger.debug("Nested " + nestedJarPath + " into " + modJar.getName());
-				}
-
-				json.add("jars", nestedJars);
-
-				return json;
-			})));
+			int count = ZipUtils.transformJson(JsonObject.class, modJar.toPath(), Stream.of(new Pair<>(ModMetadataHelper.getMetadataPath(modJar.toPath()), json -> ModJsonFactory.createFromZip(modJar.toPath()).addNestedJars(json, files))));
 
-			Preconditions.checkState(count > 0, "Failed to transform fabric.mod.json");
+			Preconditions.checkState(count > 0, "Failed to transform mod metadata file");
 		} catch (IOException e) {
 			throw new java.io.UncheckedIOException("Failed to nest jars into " + modJar.getName(), e);
 		}
diff --git a/src/main/java/net/fabricmc/loom/configuration/FileDependencyInfo.java b/src/main/java/net/fabricmc/loom/configuration/FileDependencyInfo.java
index 73bbc878d5658e706764c0134a7483dc455b235e..2aa9e26772a5c5306ba881c29affc79f6d7bbdd8 100644
--- a/src/main/java/net/fabricmc/loom/configuration/FileDependencyInfo.java
+++ b/src/main/java/net/fabricmc/loom/configuration/FileDependencyInfo.java
@@ -45,8 +45,9 @@ import org.gradle.api.artifacts.Configuration;
 import org.gradle.api.artifacts.Dependency;
 import org.gradle.api.artifacts.FileCollectionDependency;
 
-import net.fabricmc.loom.util.ZipUtils;
 import net.fabricmc.loom.util.gradle.SelfResolvingDependencyUtils;
+import net.fabricmc.loom.api.metadata.ModJson;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
 
 public class FileDependencyInfo extends DependencyInfo {
 	protected final Map<String, File> classifierToFile = new HashMap<>();
@@ -102,31 +103,28 @@ public class FileDependencyInfo extends DependencyInfo {
 		} else {
 			group = "net.fabricmc.synthetic";
 			File root = classifierToFile.get(""); //We've built the classifierToFile map, now to try find a name and version for our dependency
-			byte[] modJson;
-
-			try {
-				if ("jar".equals(FilenameUtils.getExtension(root.getName())) && (modJson = ZipUtils.unpackNullable(root.toPath(), "fabric.mod.json")) != null) {
-					//It's a Fabric mod, see how much we can extract out
-					JsonObject json = new Gson().fromJson(new String(modJson, StandardCharsets.UTF_8), JsonObject.class);
-
-					if (json == null || !json.has("id") || !json.has("version")) {
-						throw new IllegalArgumentException("Invalid Fabric mod jar: " + root + " (malformed json: " + json + ')');
-					}
-
-					if (json.has("name")) { //Go for the name field if it's got one
-						name = json.get("name").getAsString();
-					} else {
-						name = json.get("id").getAsString();
-					}
-
-					version = json.get("version").getAsString();
-				} else {
-					//Not a Fabric mod, just have to make something up
-					name = FilenameUtils.removeExtension(root.getName());
-					version = "1.0";
+
+			ModJson metadata;
+
+			if ("jar".equals(FilenameUtils.getExtension(root.getName())) && (metadata = ModJsonFactory.createFromZipNullable(root.toPath())) != null) {
+				//It has metadata we can parse; try to extract as much as we can out of it
+				String name = metadata.getModName();
+
+				if (name == null) {
+					name = metadata.getId();
+				}
+
+				this.name = name;
+
+				version = metadata.getModVersion();
+
+				if (version == null) {
+					throw new IllegalArgumentException("Invalid mod jar (no version): " + root);
 				}
-			} catch (IOException e) {
-				throw new UncheckedIOException("Failed to read input file: " + root, e);
+			} else {
+				//Not a Fabric mod, just have to make something up
+				name = FilenameUtils.removeExtension(root.getName());
+				version = "1.0";
 			}
 		}
 	}
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerEntry.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerEntry.java
index 802b7c85bf1a58fbf1d2cf3575ee55d388323999..b32424ddcfe807de8e47ddb908e71dc01cec0c82 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerEntry.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerEntry.java
@@ -29,8 +29,8 @@ import java.io.IOException;
 import org.jetbrains.annotations.Nullable;
 
 import net.fabricmc.accesswidener.AccessWidenerVisitor;
+import net.fabricmc.loom.configuration.metadata.ModEnvironment;
 import net.fabricmc.loom.util.LazyCloseable;
-import net.fabricmc.loom.util.fmj.ModEnvironment;
 import net.fabricmc.tinyremapper.TinyRemapper;
 
 public interface AccessWidenerEntry {
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java
index 72c39b417441a0fbb590cb19c30c0911a2737333..d0ea700d17f3e3e829ee0759007c14cad20faea0 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java
@@ -24,63 +24,14 @@
 
 package net.fabricmc.loom.configuration.accesswidener;
 
-import java.io.IOException;
-import java.io.UncheckedIOException;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.Path;
 import java.util.Arrays;
 import java.util.Objects;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonObject;
-
-import net.fabricmc.loom.util.ZipUtils;
-
 public record AccessWidenerFile(
 		String path,
 		String modId,
 		byte[] content
 ) {
-	/**
-	 * Reads the access-widener contained in a mod jar, or returns null if there is none.
-	 */
-	public static AccessWidenerFile fromModJar(Path modJarPath) {
-		byte[] modJsonBytes;
-
-		try {
-			modJsonBytes = ZipUtils.unpackNullable(modJarPath, "fabric.mod.json");
-		} catch (IOException e) {
-			throw new UncheckedIOException("Failed to read access-widener file from: " + modJarPath.toAbsolutePath(), e);
-		}
-
-		if (modJsonBytes == null) {
-			return null;
-		}
-
-		JsonObject jsonObject = new Gson().fromJson(new String(modJsonBytes, StandardCharsets.UTF_8), JsonObject.class);
-
-		if (!jsonObject.has("accessWidener")) {
-			return null;
-		}
-
-		String awPath = jsonObject.get("accessWidener").getAsString();
-		String modId = jsonObject.get("id").getAsString();
-
-		byte[] content;
-
-		try {
-			content = ZipUtils.unpack(modJarPath, awPath);
-		} catch (IOException e) {
-			throw new UncheckedIOException("Could not find access widener file (%s) defined in the fabric.mod.json file of %s".formatted(awPath, modJarPath.toAbsolutePath()), e);
-		}
-
-		return new AccessWidenerFile(
-				awPath,
-				modId,
-				content
-		);
-	}
-
 	@Override
 	public int hashCode() {
 		int result = Objects.hash(path, modId);
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerJarProcessor.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerJarProcessor.java
index 212ef9328c791e2e1d0f740e99c4fcc055c7d299..53ea4c36cf56fd75ff95920a7cec32e9ee11f515 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerJarProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerJarProcessor.java
@@ -40,12 +40,12 @@ import org.jetbrains.annotations.Nullable;
 
 import net.fabricmc.accesswidener.AccessWidener;
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
+import net.fabricmc.loom.api.metadata.ModJson;
 import net.fabricmc.loom.api.processor.MinecraftJarProcessor;
 import net.fabricmc.loom.api.processor.ProcessorContext;
 import net.fabricmc.loom.api.processor.SpecContext;
+import net.fabricmc.loom.configuration.metadata.ModEnvironment;
 import net.fabricmc.loom.util.LazyCloseable;
-import net.fabricmc.loom.util.fmj.FabricModJson;
-import net.fabricmc.loom.util.fmj.ModEnvironment;
 import net.fabricmc.tinyremapper.TinyRemapper;
 
 public class AccessWidenerJarProcessor implements MinecraftJarProcessor<AccessWidenerJarProcessor.Spec> {
@@ -84,8 +84,8 @@ public class AccessWidenerJarProcessor implements MinecraftJarProcessor<AccessWi
 		 */
 
 		if (includeTransitive) {
-			for (FabricModJson fabricModJson : context.modDependencies()) {
-				accessWideners.addAll(ModAccessWidenerEntry.readAll(fabricModJson, true));
+			for (ModJson modJson : context.modDependencies()) {
+				accessWideners.addAll(ModAccessWidenerEntry.readAll(modJson, true));
 			}
 		}
 
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/LocalAccessWidenerEntry.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/LocalAccessWidenerEntry.java
index 3d51e3e71a986fb47d70809a523cf5a627700de3..bde8414d043d1fa82478a90bddda0829b0fb2438 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/LocalAccessWidenerEntry.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/LocalAccessWidenerEntry.java
@@ -33,9 +33,9 @@ import org.jetbrains.annotations.Nullable;
 
 import net.fabricmc.accesswidener.AccessWidenerReader;
 import net.fabricmc.accesswidener.AccessWidenerVisitor;
+import net.fabricmc.loom.configuration.metadata.ModEnvironment;
 import net.fabricmc.loom.util.Checksum;
 import net.fabricmc.loom.util.LazyCloseable;
-import net.fabricmc.loom.util.fmj.ModEnvironment;
 import net.fabricmc.tinyremapper.TinyRemapper;
 
 public record LocalAccessWidenerEntry(Path path, String hash) implements AccessWidenerEntry {
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/ModAccessWidenerEntry.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/ModAccessWidenerEntry.java
index 4731422ca79b2b0032090034d71305749a579675..b23f0e55b906b06d6df4561e4006565c9a9ff0ec 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/ModAccessWidenerEntry.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/ModAccessWidenerEntry.java
@@ -37,16 +37,17 @@ import net.fabricmc.accesswidener.AccessWidenerRemapper;
 import net.fabricmc.accesswidener.AccessWidenerVisitor;
 import net.fabricmc.accesswidener.TransitiveOnlyFilter;
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
+import net.fabricmc.loom.api.metadata.ModJson;
+import net.fabricmc.loom.configuration.metadata.ModEnvironment;
 import net.fabricmc.loom.util.LazyCloseable;
 import net.fabricmc.loom.util.fmj.FabricModJson;
-import net.fabricmc.loom.util.fmj.ModEnvironment;
 import net.fabricmc.tinyremapper.TinyRemapper;
 
 /**
  * {@link AccessWidenerEntry} implementation for a {@link FabricModJson}.
  */
-public record ModAccessWidenerEntry(FabricModJson mod, String path, ModEnvironment environment, boolean transitiveOnly) implements AccessWidenerEntry {
-	public static List<ModAccessWidenerEntry> readAll(FabricModJson modJson, boolean transitiveOnly) {
+public record ModAccessWidenerEntry(ModJson mod, String path, ModEnvironment environment, boolean transitiveOnly) implements AccessWidenerEntry {
+	public static List<ModAccessWidenerEntry> readAll(ModJson modJson, boolean transitiveOnly) {
 		var entries = new ArrayList<ModAccessWidenerEntry>();
 
 		for (Map.Entry<String, ModEnvironment> entry : modJson.getClassTweakers().entrySet()) {
diff --git a/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java b/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java
index 1ced9ba3a019f2cfab727bbe720edfe40f875d7b..46a798725545a96534bad43edc56f090a9db7c56 100644
--- a/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java
@@ -53,6 +53,7 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
+import net.fabricmc.loom.api.metadata.ModJson;
 import net.fabricmc.loom.api.processor.MinecraftJarProcessor;
 import net.fabricmc.loom.api.processor.ProcessorContext;
 import net.fabricmc.loom.api.processor.SpecContext;
@@ -60,7 +61,6 @@ import net.fabricmc.loom.util.Constants;
 import net.fabricmc.loom.util.LazyCloseable;
 import net.fabricmc.loom.util.Pair;
 import net.fabricmc.loom.util.ZipUtils;
-import net.fabricmc.loom.util.fmj.FabricModJson;
 import net.fabricmc.mappingio.tree.MappingTree;
 import net.fabricmc.mappingio.tree.MemoryMappingTree;
 import net.fabricmc.tinyremapper.TinyRemapper;
@@ -217,9 +217,9 @@ public abstract class InterfaceInjectionProcessor implements MinecraftJarProcess
 	}
 
 	private record InjectedInterface(String modId, String className, String ifaceName, @Nullable String generics) {
-		public static List<InjectedInterface> fromMod(FabricModJson fabricModJson) {
-			final String modId = fabricModJson.getId();
-			final JsonElement jsonElement = fabricModJson.getCustom(Constants.CustomModJsonKeys.INJECTED_INTERFACE);
+		public static List<InjectedInterface> fromMod(ModJson modJson) {
+			final String modId = modJson.getId();
+			final JsonElement jsonElement = modJson.getInjectedInterfaces();
 
 			if (jsonElement == null) {
 				return Collections.emptyList();
@@ -255,8 +255,8 @@ public abstract class InterfaceInjectionProcessor implements MinecraftJarProcess
 			return result;
 		}
 
-		public static List<InjectedInterface> fromMods(List<FabricModJson> fabricModJsons) {
-			return fabricModJsons.stream()
+		public static List<InjectedInterface> fromMods(List<ModJson> modJsons) {
+			return modJsons.stream()
 					.map(InjectedInterface::fromMod)
 					.flatMap(List::stream)
 					.toList();
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/ModEnvironment.java b/src/main/java/net/fabricmc/loom/configuration/metadata/ModEnvironment.java
similarity index 97%
rename from src/main/java/net/fabricmc/loom/util/fmj/ModEnvironment.java
rename to src/main/java/net/fabricmc/loom/configuration/metadata/ModEnvironment.java
index aaa5316951acae21a74c5725ab77b4e95703f6b7..d1faad3542974895bee6147a1c2cbe2e1561ad3e 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/ModEnvironment.java
+++ b/src/main/java/net/fabricmc/loom/configuration/metadata/ModEnvironment.java
@@ -22,7 +22,7 @@
  * SOFTWARE.
  */
 
-package net.fabricmc.loom.util.fmj;
+package net.fabricmc.loom.configuration.metadata;
 
 import java.util.Objects;
 
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonHelpers.java b/src/main/java/net/fabricmc/loom/configuration/metadata/ModMetadataHelper.java
similarity index 60%
rename from src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonHelpers.java
rename to src/main/java/net/fabricmc/loom/configuration/metadata/ModMetadataHelper.java
index 923c7a30d4d9785dbf26ef3f59f044197a53abe1..490240ac688d7fddba464b70005d7c236265c9b2 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonHelpers.java
+++ b/src/main/java/net/fabricmc/loom/configuration/metadata/ModMetadataHelper.java
@@ -22,10 +22,13 @@
  * SOFTWARE.
  */
 
-package net.fabricmc.loom.util.fmj;
+package net.fabricmc.loom.configuration.metadata;
 
+import java.io.File;
 import java.io.IOException;
 import java.io.UncheckedIOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -34,11 +37,18 @@ import org.gradle.api.Project;
 import org.gradle.api.tasks.SourceSet;
 
 import net.fabricmc.loom.LoomGradleExtension;
+import net.fabricmc.loom.api.metadata.ModJson;
+import net.fabricmc.loom.util.FileSystemUtil;
+import net.fabricmc.loom.util.ZipUtils;
 import net.fabricmc.loom.util.gradle.SourceSetHelper;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
+
+public class ModMetadataHelper {
+	public static final String FABRIC_MOD_JSON = "fabric.mod.json";
+	public static final String QUILT_MOD_JSON = "quilt.mod.json";
 
-public class FabricModJsonHelpers {
 	// Returns a list of Mods found in the provided project's main or client sourcesets
-	public static List<FabricModJson> getModsInProject(Project project) {
+	public static List<ModJson> getModsInProject(Project project) {
 		final LoomGradleExtension extension = LoomGradleExtension.get(project);
 		var sourceSets = new ArrayList<SourceSet>();
 		sourceSets.add(SourceSetHelper.getMainSourceSet(project));
@@ -48,10 +58,10 @@ public class FabricModJsonHelpers {
 		}
 
 		try {
-			final FabricModJson fabricModJson = FabricModJsonFactory.createFromSourceSetsNullable(sourceSets.toArray(SourceSet[]::new));
+			final ModJson modJson = ModJsonFactory.createFromSourceSetsNullable(sourceSets.toArray(SourceSet[]::new));
 
-			if (fabricModJson != null) {
-				return List.of(fabricModJson);
+			if (modJson != null) {
+				return List.of(modJson);
 			}
 		} catch (IOException e) {
 			throw new UncheckedIOException(e);
@@ -59,4 +69,24 @@ public class FabricModJsonHelpers {
 
 		return Collections.emptyList();
 	}
+
+	public static boolean isModJar(File file) {
+		return isModJar(file.toPath());
+	}
+
+	public static boolean isModJar(Path input) {
+		return ZipUtils.contains(input, QUILT_MOD_JSON) || ZipUtils.contains(input, FABRIC_MOD_JSON);
+	}
+
+	public static boolean containsMod(FileSystemUtil.Delegate fs) {
+		return Files.exists(fs.getPath(QUILT_MOD_JSON)) || Files.exists(fs.getPath(FABRIC_MOD_JSON));
+	}
+
+	public static boolean isQuiltMod(Path jar) {
+		return ZipUtils.contains(jar, QUILT_MOD_JSON);
+	}
+
+	public static String getMetadataPath(Path jar) {
+		return isQuiltMod(jar) ? QUILT_MOD_JSON : FABRIC_MOD_JSON;
+	}
 }
diff --git a/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java b/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java
index 725e4fb11c74c5bfb884c4fb62839f74c8ecfc26..7c390f3c94ada509babd1e53b4bf26754c7b51cc 100644
--- a/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java
+++ b/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java
@@ -28,14 +28,16 @@ import java.io.IOException;
 import java.nio.file.Path;
 import java.util.List;
 
+import org.jetbrains.annotations.Nullable;
 import org.objectweb.asm.commons.Remapper;
 
 import net.fabricmc.accesswidener.AccessWidenerReader;
 import net.fabricmc.accesswidener.AccessWidenerRemapper;
 import net.fabricmc.accesswidener.AccessWidenerWriter;
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
-import net.fabricmc.loom.util.fmj.FabricModJson;
-import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
+import net.fabricmc.loom.api.metadata.ModJson;
+import net.fabricmc.loom.configuration.metadata.ModMetadataHelper;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
 
 public class AccessWidenerUtils {
 	/**
@@ -56,13 +58,14 @@ public class AccessWidenerUtils {
 		return writer.write();
 	}
 
+	@Nullable
 	public static AccessWidenerData readAccessWidenerData(Path inputJar) throws IOException {
-		if (!FabricModJsonFactory.isModJar(inputJar)) {
+		if (!ModMetadataHelper.isModJar(inputJar)) {
 			return null;
 		}
 
-		final FabricModJson fabricModJson = FabricModJsonFactory.createFromZip(inputJar);
-		final List<String> classTweakers = List.copyOf(fabricModJson.getClassTweakers().keySet());
+		final ModJson modJson = ModJsonFactory.createFromZip(inputJar);
+		final List<String> classTweakers = List.copyOf(modJson.getClassTweakers().keySet());
 
 		if (classTweakers.isEmpty()) {
 			return null;
@@ -73,7 +76,7 @@ public class AccessWidenerUtils {
 		}
 
 		final String accessWidenerPath = classTweakers.get(0);
-		final byte[] accessWidener = fabricModJson.getSource().read(accessWidenerPath);
+		final byte[] accessWidener = modJson.getSource().read(accessWidenerPath);
 		final AccessWidenerReader.Header header = AccessWidenerReader.readHeader(accessWidener);
 
 		return new AccessWidenerData(accessWidenerPath, header, accessWidener);
diff --git a/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java b/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java
index 1375a06a482ee210cd7cf35f15e3923043de79f9..d618f746b6e4f4d8ec68bb0af22ca37a44b6713a 100644
--- a/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java
+++ b/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java
@@ -39,9 +39,9 @@ import org.jetbrains.annotations.Nullable;
 
 import net.fabricmc.loom.LoomGradlePlugin;
 import net.fabricmc.loom.configuration.InstallerData;
+import net.fabricmc.loom.configuration.metadata.ModMetadataHelper;
 import net.fabricmc.loom.util.Constants;
 import net.fabricmc.loom.util.FileSystemUtil;
-import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
 
 public record ArtifactMetadata(boolean isFabricMod, RemapRequirements remapRequirements, @Nullable InstallerData installerData, MixinRemapType mixinRemapType) {
 	private static final String QUILT_INSTALLER_PATH = "quilt_installer.json";
@@ -55,7 +55,7 @@ public record ArtifactMetadata(boolean isFabricMod, RemapRequirements remapRequi
 		MixinRemapType refmapRemapType = MixinRemapType.MIXIN;
 
 		try (FileSystemUtil.Delegate fs = FileSystemUtil.getJarFileSystem(artifact.path())) {
-			isFabricMod = FabricModJsonFactory.containsMod(fs);
+			isFabricMod = ModMetadataHelper.containsMod(fs);
 			final Path manifestPath = fs.getPath(Constants.Manifest.PATH);
 
 			if (Files.exists(manifestPath)) {
diff --git a/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java b/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java
index 4fca0b0d5149eec1468e6ca8072951c23e466321..4462444a117fc43b456ae8fff69b50b597bb2c52 100644
--- a/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java
+++ b/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java
@@ -41,11 +41,6 @@ import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Supplier;
 
 import com.google.common.collect.ImmutableMap;
-
-import net.fabricmc.loom.configuration.InstallerData;
-
-import net.fabricmc.loom.configuration.mods.dependency.ModDependencyFactory;
-
 import org.gradle.api.Project;
 import org.gradle.api.artifacts.Configuration;
 import org.gradle.api.artifacts.FileCollectionDependency;
@@ -67,8 +62,10 @@ import org.jetbrains.annotations.Nullable;
 import net.fabricmc.loom.LoomGradleExtension;
 import net.fabricmc.loom.LoomGradlePlugin;
 import net.fabricmc.loom.api.RemapConfigurationSettings;
+import net.fabricmc.loom.configuration.InstallerData;
 import net.fabricmc.loom.configuration.RemapConfigurations;
 import net.fabricmc.loom.configuration.mods.dependency.ModDependency;
+import net.fabricmc.loom.configuration.mods.dependency.ModDependencyFactory;
 import net.fabricmc.loom.configuration.providers.minecraft.MinecraftSourceSets;
 import net.fabricmc.loom.util.Checksum;
 import net.fabricmc.loom.util.Constants;
@@ -205,14 +202,14 @@ public class ModConfigurationRemapper {
 		if (installer.get() != null) {
 			project.getLogger().info("Applying installer data");
 
-            if (installer.get().installerData().isQuilt()) {
-                quiltLoader = true;
-            } else {
+			if (installer.get().installerData().isQuilt()) {
+				quiltLoader = true;
+			} else {
 				quiltLoader = false;
 				project.getLogger().lifecycle("Warning: Quilt Loader not detected. Using Fabric Loader.");
-            }
+			}
 
-            if (!installer.get().shouldRemap()) {
+			if (!installer.get().shouldRemap()) {
 				installerArtifactToApply.get().applyToConfiguration(project, installerConfigToApply.get());
 			}
 			installer.get().installerData().applyToProject(project);
@@ -237,6 +234,7 @@ public class ModConfigurationRemapper {
 				} else if (sourceConfigsWithQsl.contains(sourceConfig) && artifact.group().equals("net.fabricmc.fabric-api")) {
 					continue;
 				}
+
 				final ModDependency modDependency = ModDependencyFactory.create(artifact, metaCache.get(artifact), remappedConfig, clientRemappedConfig, mappingsSuffix, project);
 				scheduleSourcesRemapping(project, sourceRemapper, modDependency);
 				modDependencies.add(modDependency);
diff --git a/src/main/java/net/fabricmc/loom/configuration/mods/ModProcessor.java b/src/main/java/net/fabricmc/loom/configuration/mods/ModProcessor.java
index 83c4bc7e26b624c835cd4735a281aa2919039c37..fd42f5c93739f2348e36545452190d3d34669c90 100644
--- a/src/main/java/net/fabricmc/loom/configuration/mods/ModProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/mods/ModProcessor.java
@@ -49,6 +49,7 @@ import org.gradle.api.attributes.Usage;
 import net.fabricmc.loom.LoomGradleExtension;
 import net.fabricmc.loom.api.RemapConfigurationSettings;
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
+import net.fabricmc.loom.configuration.metadata.ModMetadataHelper;
 import net.fabricmc.loom.configuration.mods.dependency.ModDependency;
 import net.fabricmc.loom.configuration.providers.mappings.MappingConfiguration;
 import net.fabricmc.loom.extension.RemapperExtensionHolder;
@@ -58,6 +59,7 @@ import net.fabricmc.loom.util.TinyRemapperHelper;
 import net.fabricmc.loom.util.ZipUtils;
 import net.fabricmc.loom.util.kotlin.KotlinClasspathService;
 import net.fabricmc.loom.util.kotlin.KotlinRemapperClassloader;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
 import net.fabricmc.loom.util.service.SharedServiceManager;
 import net.fabricmc.tinyremapper.InputTag;
 import net.fabricmc.tinyremapper.NonClassCopyMode;
@@ -120,10 +122,7 @@ public class ModProcessor {
 	private void stripNestedJars(Path path) {
 		// Strip out all contained jar info as we dont want loader to try and load the jars contained in dev.
 		try {
-			ZipUtils.transformJson(JsonObject.class, path, Map.of("fabric.mod.json", json -> {
-				json.remove("jars");
-				return json;
-			}));
+			ZipUtils.transformJson(JsonObject.class, path, Map.of(ModMetadataHelper.getMetadataPath(path), json -> ModJsonFactory.createFromZip(path).stripNestedJars(json)));
 		} catch (IOException e) {
 			throw new UncheckedIOException("Failed to strip nested jars from %s".formatted(path), e);
 		}
diff --git a/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java b/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java
index 781ca37f2c763de0acbcb9254792052289ed00f9..ffdef6f8a9d6ae671c65a0068ec04426310e0474 100644
--- a/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java
@@ -38,18 +38,16 @@ import java.util.Objects;
 
 import javax.inject.Inject;
 
-import com.google.gson.JsonElement;
 import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
+import net.fabricmc.loom.api.metadata.ModJson;
 import net.fabricmc.loom.api.processor.MinecraftJarProcessor;
 import net.fabricmc.loom.api.processor.ProcessorContext;
 import net.fabricmc.loom.api.processor.SpecContext;
 import net.fabricmc.loom.util.Checksum;
-import net.fabricmc.loom.util.Constants;
-import net.fabricmc.loom.util.fmj.FabricModJson;
 import net.fabricmc.mappingio.MappingReader;
 import net.fabricmc.mappingio.tree.MappingTree;
 import net.fabricmc.mappingio.tree.MemoryMappingTree;
@@ -73,8 +71,8 @@ public abstract class ModJavadocProcessor implements MinecraftJarProcessor<ModJa
 	public @Nullable ModJavadocProcessor.Spec buildSpec(SpecContext context) {
 		List<ModJavadoc> javadocs = new ArrayList<>();
 
-		for (FabricModJson fabricModJson : context.allMods()) {
-			ModJavadoc javadoc = ModJavadoc.create(fabricModJson);
+		for (ModJson modJson : context.allMods()) {
+			ModJavadoc javadoc = ModJavadoc.create(modJson);
 
 			if (javadoc != null) {
 				javadocs.add(javadoc);
@@ -110,20 +108,19 @@ public abstract class ModJavadocProcessor implements MinecraftJarProcessor<ModJa
 
 	public record ModJavadoc(String modId, MemoryMappingTree mappingTree, String mappingsHash) {
 		@Nullable
-		public static ModJavadoc create(FabricModJson fabricModJson) {
-			final String modId = fabricModJson.getId();
-			final JsonElement customElement = fabricModJson.getCustom(Constants.CustomModJsonKeys.PROVIDED_JAVADOC);
+		public static ModJavadoc create(ModJson modJson) {
+			final String modId = modJson.getId();
+			final String javaDocPath = modJson.getProvidedJavadocPath();
 
-			if (customElement == null) {
+			if (javaDocPath == null) {
 				return null;
 			}
 
-			final String javaDocPath = customElement.getAsString();
 			final MemoryMappingTree mappings = new MemoryMappingTree();
 			final String mappingsHash;
 
 			try {
-				final byte[] data = fabricModJson.getSource().read(javaDocPath);
+				final byte[] data = modJson.getSource().read(javaDocPath);
 				mappingsHash = Checksum.sha1Hex(data);
 
 				try (Reader reader = new InputStreamReader(new ByteArrayInputStream(data))) {
diff --git a/src/main/java/net/fabricmc/loom/configuration/processors/SpecContextImpl.java b/src/main/java/net/fabricmc/loom/configuration/processors/SpecContextImpl.java
index 97e96a47ee9848d0809ae9b7ea6e01165a0e5d8e..f5d8392f0a1315fcaf78ce5edd1542ab07441061 100644
--- a/src/main/java/net/fabricmc/loom/configuration/processors/SpecContextImpl.java
+++ b/src/main/java/net/fabricmc/loom/configuration/processors/SpecContextImpl.java
@@ -45,35 +45,35 @@ import org.gradle.api.plugins.JavaPlugin;
 
 import net.fabricmc.loom.LoomGradleExtension;
 import net.fabricmc.loom.api.RemapConfigurationSettings;
+import net.fabricmc.loom.api.metadata.ModJson;
 import net.fabricmc.loom.api.processor.SpecContext;
+import net.fabricmc.loom.configuration.metadata.ModMetadataHelper;
 import net.fabricmc.loom.util.Constants;
-import net.fabricmc.loom.util.fmj.FabricModJson;
-import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
-import net.fabricmc.loom.util.fmj.FabricModJsonHelpers;
 import net.fabricmc.loom.util.gradle.GradleUtils;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
 
 /**
  * @param modDependencies External mods that are depended on
  * @param localMods Mods found in the current project.
  * @param compileRuntimeMods Dependent mods found in both the compile and runtime classpath.
  */
-public record SpecContextImpl(List<FabricModJson> modDependencies, List<FabricModJson> localMods, List<FabricModJson> compileRuntimeMods) implements SpecContext {
+public record SpecContextImpl(List<ModJson> modDependencies, List<ModJson> localMods, List<ModJson> compileRuntimeMods) implements SpecContext {
 	public static SpecContextImpl create(Project project) {
-		final Map<String, List<FabricModJson>> fmjCache = new HashMap<>();
-		return new SpecContextImpl(getDependentMods(project, fmjCache), FabricModJsonHelpers.getModsInProject(project), getCompileRuntimeMods(project, fmjCache));
+		final Map<String, List<ModJson>> fmjCache = new HashMap<>();
+		return new SpecContextImpl(getDependentMods(project, fmjCache), ModMetadataHelper.getModsInProject(project), getCompileRuntimeMods(project, fmjCache));
 	}
 
 	// Reruns a list of mods found on both the compile and/or runtime classpaths
-	private static List<FabricModJson> getDependentMods(Project project, Map<String, List<FabricModJson>> fmjCache) {
+	private static List<ModJson> getDependentMods(Project project, Map<String, List<ModJson>> fmjCache) {
 		final LoomGradleExtension extension = LoomGradleExtension.get(project);
-		var mods = new ArrayList<FabricModJson>();
+		var mods = new ArrayList<ModJson>();
 
 		for (RemapConfigurationSettings entry : extension.getRemapConfigurations()) {
 			final Set<File> artifacts = entry.getSourceConfiguration().get().resolve();
 
 			for (File artifact : artifacts) {
-				final List<FabricModJson> fabricModJson = fmjCache.computeIfAbsent(artifact.toPath().toAbsolutePath().toString(), $ -> {
-					return FabricModJsonFactory.createFromZipOptional(artifact.toPath())
+				final List<ModJson> fabricModJson = fmjCache.computeIfAbsent(artifact.toPath().toAbsolutePath().toString(), $ -> {
+					return (List<ModJson>) ModJsonFactory.createFromZipOptional(artifact.toPath())
 							.map(List::of)
 							.orElseGet(List::of);
 				});
@@ -88,7 +88,7 @@ public record SpecContextImpl(List<FabricModJson> modDependencies, List<FabricMo
 			// Add all the dependent projects
 			for (Project dependentProject : getDependentProjects(project).toList()) {
 				mods.addAll(fmjCache.computeIfAbsent(dependentProject.getPath(), $ -> {
-					return FabricModJsonHelpers.getModsInProject(dependentProject);
+					return ModMetadataHelper.getModsInProject(dependentProject);
 				}));
 			}
 		}
@@ -105,12 +105,12 @@ public record SpecContextImpl(List<FabricModJson> modDependencies, List<FabricMo
 	}
 
 	// Returns a list of mods that are on both to compile and runtime classpath
-	private static List<FabricModJson> getCompileRuntimeMods(Project project, Map<String, List<FabricModJson>> fmjCache) {
+	private static List<ModJson> getCompileRuntimeMods(Project project, Map<String, List<ModJson>> fmjCache) {
 		var mods = new ArrayList<>(getCompileRuntimeModsFromRemapConfigs(project, fmjCache).toList());
 
 		for (Project dependentProject : getCompileRuntimeProjectDependencies(project).toList()) {
 			mods.addAll(fmjCache.computeIfAbsent(dependentProject.getPath(), $ -> {
-				return FabricModJsonHelpers.getModsInProject(dependentProject);
+				return ModMetadataHelper.getModsInProject(dependentProject);
 			}));
 		}
 
@@ -118,7 +118,7 @@ public record SpecContextImpl(List<FabricModJson> modDependencies, List<FabricMo
 	}
 
 	// Returns a list of jar mods that are found on the compile and runtime remapping configurations
-	private static Stream<FabricModJson> getCompileRuntimeModsFromRemapConfigs(Project project, Map<String, List<FabricModJson>> fmjCache) {
+	private static Stream<ModJson> getCompileRuntimeModsFromRemapConfigs(Project project, Map<String, List<ModJson>> fmjCache) {
 		final LoomGradleExtension extension = LoomGradleExtension.get(project);
 		final List<Path> runtimeEntries = extension.getRuntimeRemapConfigurations().stream()
 				.filter(settings -> settings.getApplyDependencyTransforms().get())
@@ -130,15 +130,15 @@ public record SpecContextImpl(List<FabricModJson> modDependencies, List<FabricMo
 				.flatMap(resolveArtifacts(project, false))
 				.filter(runtimeEntries::contains) // Use the intersection of the two configurations.
 				.map(zipPath -> {
-					final List<FabricModJson> list = fmjCache.computeIfAbsent(zipPath.toAbsolutePath().toString(), $ -> {
-						return FabricModJsonFactory.createFromZipOptional(zipPath)
+					final List<ModJson> list = fmjCache.computeIfAbsent(zipPath.toAbsolutePath().toString(), $ -> {
+						return (List<ModJson>) ModJsonFactory.createFromZipOptional(zipPath)
 								.map(List::of)
 								.orElseGet(List::of);
 					});
 					return list.isEmpty() ? null : list.get(0);
 				})
 				.filter(Objects::nonNull)
-				.sorted(Comparator.comparing(FabricModJson::getId));
+				.sorted(Comparator.comparing(ModJson::getId));
 	}
 
 	private static Function<RemapConfigurationSettings, Stream<Path>> resolveArtifacts(Project project, boolean runtime) {
@@ -171,12 +171,12 @@ public record SpecContextImpl(List<FabricModJson> modDependencies, List<FabricMo
 	}
 
 	// Sort to ensure stable caching
-	private static List<FabricModJson> sorted(List<FabricModJson> mods) {
-		return mods.stream().sorted(Comparator.comparing(FabricModJson::getId)).toList();
+	private static List<ModJson> sorted(List<ModJson> mods) {
+		return mods.stream().sorted(Comparator.comparing(ModJson::getId)).toList();
 	}
 
 	@Override
-	public List<FabricModJson> modDependenciesCompileRuntime() {
+	public List<ModJson> modDependenciesCompileRuntime() {
 		return compileRuntimeMods;
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/extension/ModVersionParser.java b/src/main/java/net/fabricmc/loom/extension/ModVersionParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..8f4b450f1e715f7636fcce176cda61fb796bf429
--- /dev/null
+++ b/src/main/java/net/fabricmc/loom/extension/ModVersionParser.java
@@ -0,0 +1,2 @@
+package net.fabricmc.loom.extension;public class ModVersionParser {
+}
diff --git a/src/main/java/net/fabricmc/loom/task/RemapJarTask.java b/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
index 54dd46bba803235aaa2a2fe7b71d449ed169f8df..9bd2c7e5b4490f7eb53826a24d7cd764a0af1299 100644
--- a/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
+++ b/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
@@ -62,6 +62,7 @@ import net.fabricmc.accesswidener.AccessWidenerReader;
 import net.fabricmc.accesswidener.AccessWidenerRemapper;
 import net.fabricmc.accesswidener.AccessWidenerWriter;
 import net.fabricmc.loom.LoomGradleExtension;
+import net.fabricmc.loom.api.metadata.ModJson;
 import net.fabricmc.loom.build.nesting.IncludedJarFactory;
 import net.fabricmc.loom.build.nesting.JarNester;
 import net.fabricmc.loom.configuration.accesswidener.AccessWidenerFile;
@@ -73,9 +74,9 @@ import net.fabricmc.loom.util.ExceptionUtil;
 import net.fabricmc.loom.util.Pair;
 import net.fabricmc.loom.util.SidedClassVisitor;
 import net.fabricmc.loom.util.ZipUtils;
-import net.fabricmc.loom.util.fmj.FabricModJson;
 import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
-import net.fabricmc.loom.util.fmj.FabricModJsonUtils;
+import net.fabricmc.loom.util.metadata.ModMetadataUtils;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
 import net.fabricmc.loom.util.service.BuildSharedServiceManager;
 import net.fabricmc.loom.util.service.UnsafeWorkQueueHelper;
 import net.fabricmc.tinyremapper.OutputConsumerPath;
@@ -175,13 +176,14 @@ public abstract class RemapJarTask extends AbstractRemapJarTask {
 		final LoomGradleExtension extension = LoomGradleExtension.get(getProject());
 		final MixinExtension mixinExtension = extension.getMixin();
 
-		final FabricModJson fabricModJson = FabricModJsonFactory.createFromZipNullable(getInputFile().getAsFile().get().toPath());
+		final Path jar = getInputFile().getAsFile().get().toPath();
+		final ModJson modJson = ModJsonFactory.createFromZipNullable(jar);
 
-		if (fabricModJson == null) {
+		if (modJson == null) {
 			return;
 		}
 
-		final Collection<String> allMixinConfigs = fabricModJson.getMixinConfigurations();
+		final Collection<String> allMixinConfigs = modJson.getMixinConfigurations();
 
 		for (SourceSet sourceSet : mixinExtension.getMixinSourceSets()) {
 			MixinExtension.MixinInformationContainer container = Objects.requireNonNull(
@@ -308,16 +310,18 @@ public abstract class RemapJarTask extends AbstractRemapJarTask {
 				return;
 			}
 
-			final AccessWidenerFile accessWidenerFile = AccessWidenerFile.fromModJar(inputFile);
+			final ModJson metadata = ModJsonFactory.createFromZipNullable(inputFile);
 
-			if (accessWidenerFile == null) {
+			if (metadata == null) {
 				return;
 			}
 
-			byte[] remapped = remapAccessWidener(accessWidenerFile.content());
+			for (String awPath : metadata.getClassTweakers().keySet()) {
+				byte[] remapped = remapAccessWidener(ZipUtils.unpack(inputFile, awPath));
 
-			// Finally, replace the output with the remaped aw
-			ZipUtils.replace(outputFile, accessWidenerFile.path(), remapped);
+				// Finally, replace the output with the remaped aw
+				ZipUtils.replace(outputFile, awPath, remapped);
+			}
 		}
 
 		private byte[] remapAccessWidener(byte[] input) {
@@ -372,7 +376,7 @@ public abstract class RemapJarTask extends AbstractRemapJarTask {
 				return;
 			}
 
-			ZipUtils.transformJson(JsonObject.class, outputFile, FabricModJsonFactory.FABRIC_MOD_JSON, FabricModJsonUtils::optimizeFmj);
+			ZipUtils.transformJson(JsonObject.class, outputFile, FabricModJsonFactory.FABRIC_MOD_JSON, ModMetadataUtils::optimizeFmj);
 		}
 	}
 
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJson.java b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJson.java
index 617019cb93a5722de3be614322f4143bb98f1efd..fbb6ce1a89ab0b54cc6c120515b3a6984714a90c 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJson.java
+++ b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJson.java
@@ -24,50 +24,67 @@
 
 package net.fabricmc.loom.util.fmj;
 
-import static net.fabricmc.loom.util.fmj.FabricModJsonUtils.readString;
-
 import java.util.List;
-import java.util.Map;
 import java.util.Objects;
 
+import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import org.jetbrains.annotations.Nullable;
 import org.jetbrains.annotations.VisibleForTesting;
 
-public abstract sealed class FabricModJson permits FabricModJsonV0, FabricModJsonV1, FabricModJsonV2, FabricModJson.Mockable {
+import net.fabricmc.loom.api.metadata.ModJson;
+import net.fabricmc.loom.util.Constants;
+import net.fabricmc.loom.util.metadata.ModJsonSource;
+import net.fabricmc.loom.util.metadata.ModMetadataUtils;
+
+public abstract sealed class FabricModJson implements ModJson permits FabricModJsonV0, FabricModJsonV1, FabricModJsonV2, FabricModJson.Mockable {
 	protected final JsonObject jsonObject;
-	private final FabricModJsonSource source;
+	private final ModJsonSource source;
 
-	protected FabricModJson(JsonObject jsonObject, FabricModJsonSource source) {
+	protected FabricModJson(JsonObject jsonObject, ModJsonSource source) {
 		this.jsonObject = Objects.requireNonNull(jsonObject);
 		this.source = Objects.requireNonNull(source);
 	}
 
-	public abstract int getVersion();
-
+	@Override
 	public String getId() {
-		return readString(jsonObject, "id");
+		return ModMetadataUtils.readString(jsonObject, "id");
 	}
 
+	@Override
 	public String getModVersion() {
-		return readString(jsonObject, "version");
+		return ModMetadataUtils.readString(jsonObject, "version");
 	}
+	public abstract int getVersion();
 
 	@Nullable
 	public abstract JsonElement getCustom(String key);
 
-	public abstract List<String> getMixinConfigurations();
+	@Override
+	public JsonElement getInjectedInterfaces() {
+		return getCustom(Constants.CustomModJsonKeys.INJECTED_INTERFACE);
+	}
 
-	public abstract Map<String, ModEnvironment> getClassTweakers();
+	@Override
+	public @Nullable String getProvidedJavadocPath() {
+		JsonElement ret = getCustom(Constants.CustomModJsonKeys.PROVIDED_JAVADOC);
+		return ret != null ? ret.getAsString() : null;
+	}
+
+	@Override
+	public @Nullable String getModName() {
+		return ModMetadataUtils.readStringOrNull(jsonObject, "name");
+	}
 
-	public final FabricModJsonSource getSource() {
+	@Override
+	public final ModJsonSource getSource() {
 		return source;
 	}
 
 	@Override
 	public final String toString() {
-		return getClass().getName() + "[id=%s, version=%s, classTweakers=%s]".formatted(getId(), getVersion(), getClassTweakers());
+		return getClass().getName() + "[id=%s, version=%s]".formatted(getId(), getVersion());
 	}
 
 	@Override
@@ -82,4 +99,33 @@ public abstract sealed class FabricModJson permits FabricModJsonV0, FabricModJso
 			throw new AssertionError();
 		}
 	}
+
+	@Override
+	public JsonObject stripNestedJars(JsonObject json) {
+		json.remove("jars");
+		return json;
+	}
+
+	@Override
+	public JsonObject addNestedJars(JsonObject json, List<String> files) {
+		JsonArray nestedJars = json.has("jars") ? json.getAsJsonArray("jars") : new JsonArray();
+
+		for (String nestedJarPath: files) {
+			for (JsonElement nestedJar : nestedJars) {
+				JsonObject jarObject = nestedJar.getAsJsonObject();
+
+				if (jarObject.has("file") && jarObject.get("file").getAsString().equals(nestedJarPath)) {
+					throw new IllegalStateException("Cannot nest 2 jars at the same path: " + nestedJarPath);
+				}
+			}
+
+			JsonObject entry = new JsonObject();
+			entry.addProperty("file", nestedJarPath);
+			nestedJars.add(entry);
+		}
+
+		json.add("jars", nestedJars);
+
+		return json;
+	}
 }
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonFactory.java b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonFactory.java
index b672aa6d406bdb71ea20a4155926578e389a83b5..cf52ede68d1970d9b94c2b16e7b932a6abde0ceb 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonFactory.java
+++ b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonFactory.java
@@ -24,7 +24,7 @@
 
 package net.fabricmc.loom.util.fmj;
 
-import static net.fabricmc.loom.util.fmj.FabricModJsonUtils.readInt;
+import static net.fabricmc.loom.util.metadata.ModMetadataUtils.readInt;
 
 import java.io.File;
 import java.io.IOException;
@@ -44,9 +44,9 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import net.fabricmc.loom.LoomGradlePlugin;
-import net.fabricmc.loom.util.FileSystemUtil;
 import net.fabricmc.loom.util.ZipUtils;
 import net.fabricmc.loom.util.gradle.SourceSetHelper;
+import net.fabricmc.loom.util.metadata.ModJsonSource;
 
 public final class FabricModJsonFactory {
 	public static final String FABRIC_MOD_JSON = "fabric.mod.json";
@@ -57,7 +57,7 @@ public final class FabricModJsonFactory {
 	}
 
 	@VisibleForTesting
-	public static FabricModJson create(JsonObject jsonObject, FabricModJsonSource source) {
+	public static FabricModJson create(JsonObject jsonObject, ModJsonSource source) {
 		int schemaVersion = 0;
 
 		if (jsonObject.has("schemaVersion")) {
@@ -69,13 +69,13 @@ public final class FabricModJsonFactory {
 		case 0 -> new FabricModJsonV0(jsonObject, source);
 		case 1 -> new FabricModJsonV1(jsonObject, source);
 		case 2 -> new FabricModJsonV2(jsonObject, source);
-		default -> throw new UnsupportedOperationException(String.format("This version of fabric-loom doesn't support the newer fabric.mod.json schema version of (%s) Please update fabric-loom to be able to read this.", schemaVersion));
+		default -> throw new UnsupportedOperationException(String.format("This version of quilt-loom doesn't support the newer fabric.mod.json schema version of (%s) Please update quilt-loom to be able to read this.", schemaVersion));
 		};
 	}
 
 	public static FabricModJson createFromZip(Path zipPath) {
 		try {
-			return create(ZipUtils.unpackGson(zipPath, FABRIC_MOD_JSON, JsonObject.class), new FabricModJsonSource.ZipSource(zipPath));
+			return create(ZipUtils.unpackGson(zipPath, FABRIC_MOD_JSON, JsonObject.class), new ModJsonSource.ZipSource(zipPath));
 		} catch (IOException e) {
 			throw new UncheckedIOException("Failed to read fabric.mod.json file in zip: " + zipPath, e);
 		}
@@ -95,7 +95,7 @@ public final class FabricModJsonFactory {
 			return null;
 		}
 
-		return create(jsonObject, new FabricModJsonSource.ZipSource(zipPath));
+		return create(jsonObject, new ModJsonSource.ZipSource(zipPath));
 	}
 
 	public static Optional<FabricModJson> createFromZipOptional(Path zipPath) {
@@ -106,7 +106,7 @@ public final class FabricModJsonFactory {
 		final Path path = directory.resolve(FABRIC_MOD_JSON);
 
 		try (Reader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {
-			return create(LoomGradlePlugin.GSON.fromJson(reader, JsonObject.class), new FabricModJsonSource.DirectorySource(directory));
+			return create(LoomGradlePlugin.GSON.fromJson(reader, JsonObject.class), new ModJsonSource.DirectorySource(directory));
 		}
 	}
 
@@ -119,24 +119,12 @@ public final class FabricModJsonFactory {
 		}
 
 		try (Reader reader = Files.newBufferedReader(file.toPath(), StandardCharsets.UTF_8)) {
-			return create(LoomGradlePlugin.GSON.fromJson(reader, JsonObject.class), new FabricModJsonSource.SourceSetSource(sourceSets));
+			return create(LoomGradlePlugin.GSON.fromJson(reader, JsonObject.class), new ModJsonSource.SourceSetSource(sourceSets));
 		} catch (JsonSyntaxException e) {
-			LOGGER.warn("Failed to parse fabric.mod.json: {}", file.getAbsolutePath());
+			LOGGER.warn("Failed to parse mod json: {}", file.getAbsolutePath());
 			return null;
 		} catch (IOException e) {
 			throw new UncheckedIOException("Failed to read " + file.getAbsolutePath(), e);
 		}
 	}
-
-	public static boolean isModJar(File file) {
-		return isModJar(file.toPath());
-	}
-
-	public static boolean isModJar(Path input) {
-		return ZipUtils.contains(input, FABRIC_MOD_JSON);
-	}
-
-	public static boolean containsMod(FileSystemUtil.Delegate fs) {
-		return Files.exists(fs.getPath(FABRIC_MOD_JSON));
-	}
 }
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV0.java b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV0.java
index 935b0cea80d8cd0aa83e1e9cbeba193d268b79c9..dd04356735ed4bdc842821e787dbab12113e1906 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV0.java
+++ b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV0.java
@@ -35,9 +35,13 @@ import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
 import org.jetbrains.annotations.Nullable;
 
+import net.fabricmc.loom.configuration.metadata.ModEnvironment;
+import net.fabricmc.loom.util.metadata.ModJsonSource;
+import net.fabricmc.loom.util.metadata.ModMetadataUtils;
+
 @Deprecated
 public final class FabricModJsonV0 extends FabricModJson {
-	FabricModJsonV0(JsonObject jsonObject, FabricModJsonSource source) {
+	FabricModJsonV0(JsonObject jsonObject, ModJsonSource source) {
 		super(jsonObject, source);
 	}
 
@@ -70,13 +74,13 @@ public final class FabricModJsonV0 extends FabricModJson {
 					if (arrayElement instanceof JsonPrimitive jsonPrimitive && jsonPrimitive.isString()) {
 						mixins.add(jsonPrimitive.getAsString());
 					} else {
-						throw new FabricModJsonUtils.ParseException("Expected entries in mixin %s to be an array of strings", key);
+						throw new ModMetadataUtils.ParseException("Expected entries in mixin %s to be an array of strings", key);
 					}
 				}
 			} else if (jsonElement instanceof JsonPrimitive jsonPrimitive && jsonPrimitive.isString()) {
 				mixins.add(jsonPrimitive.getAsString());
 			} else {
-				throw new FabricModJsonUtils.ParseException("Expected mixin %s to be a string or an array of strings", key);
+				throw new ModMetadataUtils.ParseException("Expected mixin %s to be a string or an array of strings", key);
 			}
 		}
 
@@ -87,4 +91,9 @@ public final class FabricModJsonV0 extends FabricModJson {
 	public Map<String, ModEnvironment> getClassTweakers() {
 		return Collections.emptyMap();
 	}
+
+	@Override
+	public JsonElement getInjectedInterfaces() {
+		return null;
+	}
 }
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV1.java b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV1.java
index 16239e0bc34a9529bdb10393bbf23697ec504dd7..e4514773f4b1ebe7e28d7261bf59f8b58ea4c9a7 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV1.java
+++ b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV1.java
@@ -24,8 +24,6 @@
 
 package net.fabricmc.loom.util.fmj;
 
-import static net.fabricmc.loom.util.fmj.FabricModJsonUtils.readString;
-
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -38,8 +36,13 @@ import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
 import org.jetbrains.annotations.Nullable;
 
+import net.fabricmc.loom.configuration.metadata.ModEnvironment;
+import net.fabricmc.loom.util.Constants;
+import net.fabricmc.loom.util.metadata.ModJsonSource;
+import net.fabricmc.loom.util.metadata.ModMetadataUtils;
+
 public final class FabricModJsonV1 extends FabricModJson {
-	FabricModJsonV1(JsonObject jsonObject, FabricModJsonSource source) {
+	FabricModJsonV1(JsonObject jsonObject, ModJsonSource source) {
 		super(jsonObject, source);
 	}
 
@@ -48,7 +51,6 @@ public final class FabricModJsonV1 extends FabricModJson {
 		return 1;
 	}
 
-	@Override
 	@Nullable
 	public JsonElement getCustom(String key) {
 		return getCustom(jsonObject, key);
@@ -87,7 +89,7 @@ public final class FabricModJsonV1 extends FabricModJson {
 		} else if (jsonElement instanceof JsonObject obj) {
 			return obj.get("config").getAsString();
 		} else {
-			throw new FabricModJsonUtils.ParseException("Expected mixin element to be an object or string");
+			throw new ModMetadataUtils.ParseException("Expected mixin element to be an object or string");
 		}
 	}
 
@@ -97,6 +99,11 @@ public final class FabricModJsonV1 extends FabricModJson {
 			return Collections.emptyMap();
 		}
 
-		return Map.of(readString(jsonObject, "accessWidener"), ModEnvironment.UNIVERSAL);
+		return Map.of(ModMetadataUtils.readString(jsonObject, "accessWidener"), ModEnvironment.UNIVERSAL);
+	}
+
+	@Override
+	public JsonElement getInjectedInterfaces() {
+		return getCustom(Constants.CustomModJsonKeys.INJECTED_INTERFACE);
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV2.java b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV2.java
index ed52bef4635690bad6aa827c40c44bb3ce426317..0d397423670d447c9232d5fd9266a53aa1e31931 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV2.java
+++ b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV2.java
@@ -36,11 +36,14 @@ import com.google.gson.JsonPrimitive;
 import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.Nullable;
 
+import net.fabricmc.loom.configuration.metadata.ModEnvironment;
 import net.fabricmc.loom.util.Pair;
+import net.fabricmc.loom.util.metadata.ModJsonSource;
+import net.fabricmc.loom.util.metadata.ModMetadataUtils;
 
 @ApiStatus.Experimental
 public final class FabricModJsonV2 extends FabricModJson {
-	FabricModJsonV2(JsonObject jsonObject, FabricModJsonSource source) {
+	FabricModJsonV2(JsonObject jsonObject, ModJsonSource source) {
 		super(jsonObject, source);
 	}
 
@@ -91,7 +94,7 @@ public final class FabricModJsonV2 extends FabricModJson {
 				values.put(value.left(), value.right());
 			}
 		} else {
-			throw new FabricModJsonUtils.ParseException("Must be a string or array of strings");
+			throw new ModMetadataUtils.ParseException("Must be a string or array of strings");
 		}
 
 		return values;
@@ -102,10 +105,10 @@ public final class FabricModJsonV2 extends FabricModJson {
 		if (jsonElement instanceof JsonPrimitive jsonPrimitive && jsonPrimitive.isString()) {
 			return new Pair<>(jsonElement.getAsString(), ModEnvironment.UNIVERSAL);
 		} else if (jsonElement instanceof JsonObject jsonObject) {
-			final String config = FabricModJsonUtils.readString(jsonObject, "config");
+			final String config = ModMetadataUtils.readString(jsonObject, "config");
 			return new Pair<>(config, getEnvironment(jsonObject));
 		} else {
-			throw new FabricModJsonUtils.ParseException("Must be a string or an object");
+			throw new ModMetadataUtils.ParseException("Must be a string or an object");
 		}
 	}
 
@@ -116,7 +119,7 @@ public final class FabricModJsonV2 extends FabricModJson {
 		}
 
 		if (!(jsonObject.get("environment") instanceof JsonPrimitive jsonPrimitive) || !jsonPrimitive.isString()) {
-			throw new FabricModJsonUtils.ParseException("Environment must be a string");
+			throw new ModMetadataUtils.ParseException("Environment must be a string");
 		}
 
 		final String environment = jsonPrimitive.getAsString();
@@ -125,7 +128,7 @@ public final class FabricModJsonV2 extends FabricModJson {
 		case "*" -> ModEnvironment.UNIVERSAL;
 		case "client" -> ModEnvironment.CLIENT;
 		case "server" -> ModEnvironment.SERVER;
-		default -> throw new FabricModJsonUtils.ParseException("Invalid environment type: " + environment);
+		default -> throw new ModMetadataUtils.ParseException("Invalid environment type: " + environment);
 		};
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/util/metadata/ModJsonFactory.java b/src/main/java/net/fabricmc/loom/util/metadata/ModJsonFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..1af5a154c301b8b18ddef1148b6d05fa1ceddb68
--- /dev/null
+++ b/src/main/java/net/fabricmc/loom/util/metadata/ModJsonFactory.java
@@ -0,0 +1,76 @@
+/*
+ * This file is part of fabric-loom, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2022 FabricMC
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+package net.fabricmc.loom.util.metadata;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Path;
+import java.util.Optional;
+
+import org.gradle.api.tasks.SourceSet;
+import org.jetbrains.annotations.Nullable;
+
+import net.fabricmc.loom.api.metadata.ModJson;
+import net.fabricmc.loom.configuration.metadata.ModMetadataHelper;
+import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
+import net.fabricmc.loom.util.gradle.SourceSetHelper;
+import net.fabricmc.loom.util.qmj.QuiltModJsonFactory;
+
+public class ModJsonFactory {
+	public static ModJson createFromZip(Path zipPath) {
+		if (ModMetadataHelper.isQuiltMod(zipPath)) {
+			return QuiltModJsonFactory.createFromZip(zipPath);
+		} else {
+			return FabricModJsonFactory.createFromZip(zipPath);
+		}
+	}
+
+	public static ModJson createFromZipNullable(Path zipPath) {
+		if (ModMetadataHelper.isQuiltMod(zipPath)) {
+			return QuiltModJsonFactory.createFromZipNullable(zipPath);
+		} else {
+			return FabricModJsonFactory.createFromZipNullable(zipPath);
+		}
+	}
+
+	public static Optional<? extends ModJson> createFromZipOptional(Path zipPath) {
+		if (ModMetadataHelper.isQuiltMod(zipPath)) {
+			return QuiltModJsonFactory.createFromZipOptional(zipPath);
+		} else {
+			return FabricModJsonFactory.createFromZipOptional(zipPath);
+		}
+	}
+
+	@Nullable
+	public static ModJson createFromSourceSetsNullable(SourceSet... sourceSets) throws IOException {
+		File file = SourceSetHelper.findFirstFileInResource(ModMetadataHelper.QUILT_MOD_JSON, sourceSets);
+
+		if (file != null) {
+			return QuiltModJsonFactory.createFromSourceSetsNullable(sourceSets);
+		} else {
+			return FabricModJsonFactory.createFromSourceSetsNullable(sourceSets);
+		}
+	}
+}
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonSource.java b/src/main/java/net/fabricmc/loom/util/metadata/ModJsonSource.java
similarity index 78%
rename from src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonSource.java
rename to src/main/java/net/fabricmc/loom/util/metadata/ModJsonSource.java
index 9ff5a7d6a485619b887d5e39079327cc66a4d603..7953be6c2588fbab6169a05bed2cca56cd4a6dac 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonSource.java
+++ b/src/main/java/net/fabricmc/loom/util/metadata/ModJsonSource.java
@@ -22,7 +22,7 @@
  * SOFTWARE.
  */
 
-package net.fabricmc.loom.util.fmj;
+package net.fabricmc.loom.util.metadata;
 
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -31,6 +31,7 @@ import java.nio.file.Files;
 import java.nio.file.Path;
 
 import org.gradle.api.tasks.SourceSet;
+import org.jetbrains.annotations.NotNull;
 
 import net.fabricmc.loom.util.ZipUtils;
 import net.fabricmc.loom.util.gradle.SourceSetHelper;
@@ -39,26 +40,26 @@ import net.fabricmc.loom.util.gradle.SourceSetHelper;
  * A mod may be a zip, directory or Gradle {@link SourceSet}
  * This abstraction allows easily reading a contained file from the mod.
  */
-public interface FabricModJsonSource {
-	byte[] read(String path) throws IOException;
+public interface ModJsonSource {
+	byte[] read(@NotNull String path) throws IOException;
 
-	record ZipSource(Path zipPath) implements FabricModJsonSource {
+	record ZipSource(Path zipPath) implements ModJsonSource {
 		@Override
-		public byte[] read(String path) throws IOException {
+		public byte[] read(@NotNull String path) throws IOException {
 			return ZipUtils.unpack(zipPath, path);
 		}
 	}
 
-	record DirectorySource(Path directoryPath) implements FabricModJsonSource {
+	record DirectorySource(Path directoryPath) implements ModJsonSource {
 		@Override
-		public byte[] read(String path) throws IOException {
+		public byte[] read(@NotNull String path) throws IOException {
 			return Files.readAllBytes(directoryPath.resolve(path));
 		}
 	}
 
-	record SourceSetSource(SourceSet... sourceSets) implements FabricModJsonSource {
+	record SourceSetSource(SourceSet... sourceSets) implements ModJsonSource {
 		@Override
-		public byte[] read(String path) throws IOException {
+		public byte[] read(@NotNull String path) throws IOException {
 			return Files.readAllBytes(findFile(path).toPath());
 		}
 
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonUtils.java b/src/main/java/net/fabricmc/loom/util/metadata/ModMetadataUtils.java
similarity index 87%
rename from src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonUtils.java
rename to src/main/java/net/fabricmc/loom/util/metadata/ModMetadataUtils.java
index 5559551bbe823ddaa1a3e6163f0733ad8b9ae1e4..c1640fa2f38c0008b43529a19463830163e4ce02 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonUtils.java
+++ b/src/main/java/net/fabricmc/loom/util/metadata/ModMetadataUtils.java
@@ -22,7 +22,7 @@
  * SOFTWARE.
  */
 
-package net.fabricmc.loom.util.fmj;
+package net.fabricmc.loom.util.metadata;
 
 import java.util.Locale;
 import java.util.Map;
@@ -31,9 +31,10 @@ import java.util.function.Predicate;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
+import org.jetbrains.annotations.Nullable;
 
-public final class FabricModJsonUtils {
-	private FabricModJsonUtils() {
+public final class ModMetadataUtils {
+	private ModMetadataUtils() {
 	}
 
 	public static String readString(JsonObject jsonObject, String key) {
@@ -43,6 +44,15 @@ public final class FabricModJsonUtils {
 		return element.getAsString();
 	}
 
+	@Nullable
+	public static String readStringOrNull(JsonObject jsonObject, String key) {
+		if (jsonObject != null && jsonObject.has(key)) {
+			return readString(jsonObject, key);
+		} else {
+			return null;
+		}
+	}
+
 	public static int readInt(JsonObject jsonObject, String key) {
 		final JsonElement element = getElement(jsonObject, key);
 		ensurePrimitive(element, JsonPrimitive::isNumber, key);
@@ -90,8 +100,8 @@ public final class FabricModJsonUtils {
 		}
 	}
 
-	static class ParseException extends RuntimeException {
-		ParseException(String message, Object... args) {
+	public static class ParseException extends RuntimeException {
+		public ParseException(String message, Object... args) {
 			super(String.format(Locale.ROOT, message, args));
 		}
 	}
diff --git a/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJson.java b/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJson.java
new file mode 100644
index 0000000000000000000000000000000000000000..564f038b4b57dae956c70f36f30571c96f608dd8
--- /dev/null
+++ b/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJson.java
@@ -0,0 +1,59 @@
+/*
+ * This file is part of fabric-loom, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2022 FabricMC
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+package net.fabricmc.loom.util.qmj;
+
+import java.util.Objects;
+
+import com.google.gson.JsonObject;
+
+import net.fabricmc.loom.api.metadata.ModJson;
+import net.fabricmc.loom.util.metadata.ModJsonSource;
+
+public abstract sealed class QuiltModJson implements ModJson permits QuiltModJsonV1 {
+	protected final JsonObject jsonObject;
+	protected final JsonObject loader;
+	private final ModJsonSource source;
+
+	protected QuiltModJson(JsonObject jsonObject, ModJsonSource source) {
+		this.jsonObject = Objects.requireNonNull(jsonObject);
+		this.source = Objects.requireNonNull(source);
+		this.loader = jsonObject.getAsJsonObject("quilt_loader");
+	}
+
+	@Override
+	public final ModJsonSource getSource() {
+		return source;
+	}
+
+	@Override
+	public final String toString() {
+		return getClass().getName() + "[id=%s]".formatted(getId());
+	}
+
+	@Override
+	public final int hashCode() {
+		return Objects.hash(getId());
+	}
+}
diff --git a/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonFactory.java b/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..e179a45578d1ef12c15e06e387886ba32cac0f9f
--- /dev/null
+++ b/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonFactory.java
@@ -0,0 +1,118 @@
+/*
+ * This file is part of fabric-loom, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2022 FabricMC
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+package net.fabricmc.loom.util.qmj;
+
+import static net.fabricmc.loom.util.metadata.ModMetadataUtils.readInt;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.Reader;
+import java.io.UncheckedIOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.Optional;
+
+import com.google.gson.JsonObject;
+import org.gradle.api.tasks.SourceSet;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.VisibleForTesting;
+
+import net.fabricmc.loom.LoomGradlePlugin;
+import net.fabricmc.loom.util.ZipUtils;
+import net.fabricmc.loom.util.gradle.SourceSetHelper;
+import net.fabricmc.loom.util.metadata.ModJsonSource;
+
+public final class QuiltModJsonFactory {
+	private static final String QUILT_MOD_JSON = "quilt.mod.json";
+
+	private QuiltModJsonFactory() {
+	}
+
+	@VisibleForTesting
+	public static QuiltModJson create(JsonObject jsonObject, ModJsonSource source) {
+		int schemaVersion = 0;
+
+		if (jsonObject.has("schema_version")) {
+			// V0 had no schemaVersion key.
+			schemaVersion = readInt(jsonObject, "schema_version");
+		}
+
+		return switch (schemaVersion) {
+		case 1 -> new QuiltModJsonV1(jsonObject, source);
+		default -> throw new UnsupportedOperationException(String.format("This version of quilt-loom doesn't support the newer quilt.mod.json schema version of (%s) Please update quilt-loom to be able to read this.", schemaVersion));
+		};
+	}
+
+	public static QuiltModJson createFromZip(Path zipPath) {
+		try {
+			return create(ZipUtils.unpackGson(zipPath, QUILT_MOD_JSON, JsonObject.class), new ModJsonSource.ZipSource(zipPath));
+		} catch (IOException e) {
+			throw new UncheckedIOException("Failed to read fabric.mod.json file in zip: " + zipPath, e);
+		}
+	}
+
+	@Nullable
+	public static QuiltModJson createFromZipNullable(Path zipPath) {
+		JsonObject jsonObject;
+
+		try {
+			jsonObject = ZipUtils.unpackGsonNullable(zipPath, QUILT_MOD_JSON, JsonObject.class);
+		} catch (IOException e) {
+			throw new UncheckedIOException("Failed to read zip: " + zipPath, e);
+		}
+
+		if (jsonObject == null) {
+			return null;
+		}
+
+		return create(jsonObject, new ModJsonSource.ZipSource(zipPath));
+	}
+
+	public static Optional<QuiltModJson> createFromZipOptional(Path zipPath) {
+		return Optional.ofNullable(createFromZipNullable(zipPath));
+	}
+
+	public static QuiltModJson createFromDirectory(Path directory) throws IOException {
+		final Path path = directory.resolve(QUILT_MOD_JSON);
+
+		try (Reader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {
+			return create(LoomGradlePlugin.GSON.fromJson(reader, JsonObject.class), new ModJsonSource.DirectorySource(directory));
+		}
+	}
+
+	@Nullable
+	public static QuiltModJson createFromSourceSetsNullable(SourceSet... sourceSets) throws IOException {
+		final File file = SourceSetHelper.findFirstFileInResource(QUILT_MOD_JSON, sourceSets);
+
+		if (file == null) {
+			return null;
+		}
+
+		try (Reader reader = Files.newBufferedReader(file.toPath(), StandardCharsets.UTF_8)) {
+			return create(LoomGradlePlugin.GSON.fromJson(reader, JsonObject.class), new ModJsonSource.SourceSetSource(sourceSets));
+		}
+	}
+}
diff --git a/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonV1.java b/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonV1.java
new file mode 100644
index 0000000000000000000000000000000000000000..e7e4947e2629eaecb4ba2028ac1f19ed49d6c3e3
--- /dev/null
+++ b/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonV1.java
@@ -0,0 +1,170 @@
+/*
+ * This file is part of fabric-loom, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2022 FabricMC
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+package net.fabricmc.loom.util.qmj;
+
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.stream.Collectors;
+import java.util.stream.StreamSupport;
+
+import com.google.gson.JsonArray;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonPrimitive;
+import org.jetbrains.annotations.Nullable;
+
+import net.fabricmc.loom.configuration.metadata.ModEnvironment;
+import net.fabricmc.loom.util.metadata.ModJsonSource;
+import net.fabricmc.loom.util.metadata.ModMetadataUtils;
+
+public final class QuiltModJsonV1 extends QuiltModJson {
+	QuiltModJsonV1(JsonObject jsonObject, ModJsonSource source) {
+		super(jsonObject, source);
+	}
+
+	@Override
+	public String getId() {
+		return ModMetadataUtils.readString(loader, "id");
+	}
+
+	@Override
+	public String getModVersion() {
+		return ModMetadataUtils.readString(loader, "version");
+	}
+
+	@Override
+	public String getModName() {
+		if (loader.has("metadata")) {
+			JsonObject metadata = loader.getAsJsonObject("metadata");
+
+			if (metadata.has("name")) {
+				return ModMetadataUtils.readString(metadata, "name");
+			}
+		}
+
+		return null;
+	}
+
+	public @Nullable JsonElement getCustom(String key) {
+		return jsonObject.get(key);
+	}
+
+	@Override
+	public List<String> getMixinConfigurations() {
+		final JsonElement mixins = jsonObject.get("mixin");
+
+		if (mixins == null) {
+			return Collections.emptyList();
+		} else if (mixins.isJsonArray()) {
+			return StreamSupport.stream(mixins.getAsJsonArray().spliterator(), false)
+					.map(QuiltModJsonV1::readMixinElement)
+					.collect(Collectors.toList());
+		} else if (mixins.isJsonPrimitive() && mixins.getAsJsonPrimitive().isString()) {
+			return Collections.singletonList(mixins.getAsJsonPrimitive().getAsString());
+		} else {
+			throw new RuntimeException("Incorrect QMJ format; expected 'mixin' to be a string or array");
+		}
+	}
+
+	private static String readMixinElement(JsonElement jsonElement) {
+		if (jsonElement instanceof JsonPrimitive str) {
+			return str.getAsString();
+		} else if (jsonElement instanceof JsonObject obj) {
+			return obj.get("config").getAsString();
+		} else {
+			throw new RuntimeException("Expected mixin element to be an object or string");
+		}
+	}
+	@Override
+	public Map<String, ModEnvironment> getClassTweakers() {
+		final JsonElement aws = jsonObject.get("access_widener");
+
+		if (aws != null) {
+			if (aws.isJsonArray()) {
+				JsonArray array = aws.getAsJsonArray();
+
+				if (array.size() > 1) {
+					throw new UnsupportedOperationException("Loom does not support more than one access widener per mod. Sorry!");
+				} else if (array.size() == 1) {
+					return Map.of(array.get(0).getAsString(), ModEnvironment.UNIVERSAL);
+				}
+			} else if (aws.isJsonPrimitive() && aws.getAsJsonPrimitive().isString()) {
+				return Map.of(aws.getAsString(), ModEnvironment.UNIVERSAL);
+			}
+		}
+
+		return Collections.emptyMap();
+	}
+
+	@Override
+	public @Nullable JsonElement getInjectedInterfaces() {
+		final JsonElement loom = getCustom("quilt_loom");
+
+		if (loom != null) {
+			return loom.getAsJsonObject().get("injected_interfaces");
+		} else {
+			return null;
+		}
+	}
+
+	@Override
+	public String getProvidedJavadocPath() {
+		final JsonElement loom = getCustom("quilt_loom");
+
+		if (loom != null) {
+			return ModMetadataUtils.readStringOrNull(loom.getAsJsonObject(), "provided_javadoc");
+		} else {
+			return null;
+		}
+	}
+
+	@Override
+	public JsonObject stripNestedJars(JsonObject json) {
+		JsonObject loader = json.has("quilt_loader") ? json.get("quilt_loader").getAsJsonObject() : new JsonObject();
+		loader.remove("jars");
+		return json;
+	}
+
+	@Override
+	public JsonObject addNestedJars(JsonObject json, List<String> files) {
+		JsonObject loader = json.has("quilt_loader") ? json.get("quilt_loader").getAsJsonObject() : new JsonObject();
+		JsonArray nestedJars = loader.has("jars") ? json.get("jars").getAsJsonArray() : new JsonArray();
+
+		for (String nestedJarPath : files) {
+			for (JsonElement nestedJar : nestedJars) {
+				if (nestedJarPath.equals(nestedJar.getAsString())) {
+					throw new IllegalStateException("Cannot nest 2 jars at the same path: " + nestedJarPath);
+				}
+			}
+
+			nestedJars.add(nestedJarPath);
+		}
+
+		loader.add("jars", nestedJars);
+
+		return json;
+	}
+}
diff --git a/src/test/groovy/net/fabricmc/loom/test/unit/fmj/FabricModJsonV0Test.groovy b/src/test/groovy/net/fabricmc/loom/test/unit/fmj/FabricModJsonV0Test.groovy
index 384c3cf383e11673dadade38596bbf33bc7ac77b..0175bfb441d34ec478dd12d01f25057ea1e50c62 100644
--- a/src/test/groovy/net/fabricmc/loom/test/unit/fmj/FabricModJsonV0Test.groovy
+++ b/src/test/groovy/net/fabricmc/loom/test/unit/fmj/FabricModJsonV0Test.groovy
@@ -31,7 +31,7 @@ import spock.lang.Specification
 
 import net.fabricmc.loom.util.Constants
 import net.fabricmc.loom.util.fmj.FabricModJsonFactory
-import net.fabricmc.loom.util.fmj.FabricModJsonSource
+import net.fabricmc.loom.util.metadata.ModJsonSource
 
 class FabricModJsonV0Test extends Specification {
 	// I think this is the old v0 format ¯\_(ツ)_/¯
@@ -57,7 +57,7 @@ class FabricModJsonV0Test extends Specification {
 
 	def "version"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		then:
@@ -67,7 +67,7 @@ class FabricModJsonV0Test extends Specification {
 
 	def "id"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		then:
@@ -76,7 +76,7 @@ class FabricModJsonV0Test extends Specification {
 
 	def "mixins"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		then:
@@ -89,7 +89,7 @@ class FabricModJsonV0Test extends Specification {
 	// Not supported in this version
 	def "injected interfaces"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		def jsonObject = fmj.getCustom(Constants.CustomModJsonKeys.INJECTED_INTERFACE)
@@ -100,7 +100,7 @@ class FabricModJsonV0Test extends Specification {
 	// Not supported in this version
 	def "class tweaker"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		then:
@@ -109,7 +109,7 @@ class FabricModJsonV0Test extends Specification {
 
 	def "hash code"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		then:
diff --git a/src/test/groovy/net/fabricmc/loom/test/unit/fmj/FabricModJsonV1Test.groovy b/src/test/groovy/net/fabricmc/loom/test/unit/fmj/FabricModJsonV1Test.groovy
index 9053d14f41954c98a8cf55d404039d46baadffb4..04dffd7679741b277ec30591c2e7473e05304938 100644
--- a/src/test/groovy/net/fabricmc/loom/test/unit/fmj/FabricModJsonV1Test.groovy
+++ b/src/test/groovy/net/fabricmc/loom/test/unit/fmj/FabricModJsonV1Test.groovy
@@ -29,10 +29,10 @@ import com.google.gson.JsonObject
 import org.intellij.lang.annotations.Language
 import spock.lang.Specification
 
+import net.fabricmc.loom.configuration.metadata.ModEnvironment
 import net.fabricmc.loom.util.Constants
 import net.fabricmc.loom.util.fmj.FabricModJsonFactory
-import net.fabricmc.loom.util.fmj.FabricModJsonSource
-import net.fabricmc.loom.util.fmj.ModEnvironment
+import net.fabricmc.loom.util.metadata.ModJsonSource
 
 class FabricModJsonV1Test extends Specification {
 	@Language("json")
@@ -64,7 +64,7 @@ class FabricModJsonV1Test extends Specification {
 
 	def "version"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		then:
@@ -74,7 +74,7 @@ class FabricModJsonV1Test extends Specification {
 
 	def "id"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		then:
@@ -83,7 +83,7 @@ class FabricModJsonV1Test extends Specification {
 
 	def "mixins"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		then:
@@ -95,7 +95,7 @@ class FabricModJsonV1Test extends Specification {
 
 	def "injected interfaces"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		def jsonObject = fmj.getCustom(Constants.CustomModJsonKeys.INJECTED_INTERFACE)
@@ -106,7 +106,7 @@ class FabricModJsonV1Test extends Specification {
 
 	def "access widener"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		then:
@@ -115,7 +115,7 @@ class FabricModJsonV1Test extends Specification {
 
 	def "hash code"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		then:
diff --git a/src/test/groovy/net/fabricmc/loom/test/unit/fmj/FabricModJsonV2Test.groovy b/src/test/groovy/net/fabricmc/loom/test/unit/fmj/FabricModJsonV2Test.groovy
index 212de2ac070a0fde9ce1b4261ade497676fd41f6..e94b875105d09382c746b05f089eb71cca0cd943 100644
--- a/src/test/groovy/net/fabricmc/loom/test/unit/fmj/FabricModJsonV2Test.groovy
+++ b/src/test/groovy/net/fabricmc/loom/test/unit/fmj/FabricModJsonV2Test.groovy
@@ -29,10 +29,10 @@ import com.google.gson.JsonObject
 import org.intellij.lang.annotations.Language
 import spock.lang.Specification
 
+import net.fabricmc.loom.configuration.metadata.ModEnvironment
 import net.fabricmc.loom.util.Constants
 import net.fabricmc.loom.util.fmj.FabricModJsonFactory
-import net.fabricmc.loom.util.fmj.FabricModJsonSource
-import net.fabricmc.loom.util.fmj.ModEnvironment
+import net.fabricmc.loom.util.metadata.ModJsonSource
 
 class FabricModJsonV2Test extends Specification {
 	@Language("json")
@@ -78,7 +78,7 @@ class FabricModJsonV2Test extends Specification {
 
 	def "version"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		then:
@@ -88,7 +88,7 @@ class FabricModJsonV2Test extends Specification {
 
 	def "id"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		then:
@@ -97,7 +97,7 @@ class FabricModJsonV2Test extends Specification {
 
 	def "mixins"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		then:
@@ -110,7 +110,7 @@ class FabricModJsonV2Test extends Specification {
 
 	def "injected interfaces"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		def jsonObject = fmj.getCustom(Constants.CustomModJsonKeys.INJECTED_INTERFACE)
@@ -121,7 +121,7 @@ class FabricModJsonV2Test extends Specification {
 
 	def "class tweakers"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		then:
@@ -134,7 +134,7 @@ class FabricModJsonV2Test extends Specification {
 
 	def "hash code"() {
 		given:
-		def mockSource = Mock(FabricModJsonSource)
+		def mockSource = Mock(ModJsonSource)
 		when:
 		def fmj = FabricModJsonFactory.create(JSON_OBJECT, mockSource)
 		then:
diff --git a/src/test/groovy/net/fabricmc/loom/test/unit/processor/AccessWidenerJarProcessorTest.groovy b/src/test/groovy/net/fabricmc/loom/test/unit/processor/AccessWidenerJarProcessorTest.groovy
index 19a55536ed767787d0c7ecf218fc8469aa7412b0..4d12ba111d91c301f0da84cc07213be372db05a2 100644
--- a/src/test/groovy/net/fabricmc/loom/test/unit/processor/AccessWidenerJarProcessorTest.groovy
+++ b/src/test/groovy/net/fabricmc/loom/test/unit/processor/AccessWidenerJarProcessorTest.groovy
@@ -28,9 +28,9 @@ import spock.lang.Specification
 
 import net.fabricmc.loom.api.processor.SpecContext
 import net.fabricmc.loom.configuration.accesswidener.AccessWidenerJarProcessor
+import net.fabricmc.loom.configuration.metadata.ModEnvironment
 import net.fabricmc.loom.test.util.GradleTestUtil
 import net.fabricmc.loom.util.fmj.FabricModJson
-import net.fabricmc.loom.util.fmj.ModEnvironment
 
 class AccessWidenerJarProcessorTest extends Specification {
 	def "Local AW"() {
diff --git a/src/test/groovy/net/fabricmc/loom/test/unit/processor/ModAccessWidenerEntryTest.groovy b/src/test/groovy/net/fabricmc/loom/test/unit/processor/ModAccessWidenerEntryTest.groovy
index 5b23d99780c9be5300cf6c6c2ccb32a0724a0ce9..da27fecae2d10027501a467c82cc3bb70133ecc4 100644
--- a/src/test/groovy/net/fabricmc/loom/test/unit/processor/ModAccessWidenerEntryTest.groovy
+++ b/src/test/groovy/net/fabricmc/loom/test/unit/processor/ModAccessWidenerEntryTest.groovy
@@ -27,8 +27,8 @@ package net.fabricmc.loom.test.unit.processor
 import spock.lang.Specification
 
 import net.fabricmc.loom.configuration.accesswidener.ModAccessWidenerEntry
+import net.fabricmc.loom.configuration.metadata.ModEnvironment
 import net.fabricmc.loom.util.fmj.FabricModJson
-import net.fabricmc.loom.util.fmj.ModEnvironment
 
 class ModAccessWidenerEntryTest extends Specification {
 	def "read local mod"() {
