From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: tibs <git@tibinonest.me>
Date: Wed, 1 Feb 2023 17:13:57 -0500
Subject: [PATCH] Support QMJ


diff --git a/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java b/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java
index 8c7ae953ced1d1896aba60095d1fbf166c3b4448..aa90caba3b78c6fe0d2e068620084e49faa87631 100644
--- a/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java
+++ b/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java
@@ -166,10 +166,10 @@ public interface LoomGradleExtensionAPI {
 	void disableDeprecatedPomGeneration(MavenPublication publication);
 
 	/**
-	 * Reads the mod version from the fabric.mod.json file located in the main sourcesets resources.
-	 * This is useful if you want to set the gradle version based of the version in the fabric.mod.json file.
+	 * Reads the mod version from the mod metadata file located in the main sourcesets resources.
+	 * This is useful if you want to set the gradle version based of the version in the mod metadata file.
 	 *
-	 * @return the version defined in the fabric.mod.json
+	 * @return the version defined in the mod metadata file
 	 */
 	String getModVersion();
 
diff --git a/src/main/java/net/fabricmc/loom/api/metadata/ModJson.java b/src/main/java/net/fabricmc/loom/api/metadata/ModJson.java
new file mode 100644
index 0000000000000000000000000000000000000000..87b60fd6b52341fe776c005f3f7c461bd7984007
--- /dev/null
+++ b/src/main/java/net/fabricmc/loom/api/metadata/ModJson.java
@@ -0,0 +1,58 @@
+/*
+ * This file is part of fabric-loom, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2022 FabricMC
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+package net.fabricmc.loom.api.metadata;
+
+import java.util.List;
+import java.util.Map;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.Nullable;
+
+import net.fabricmc.loom.util.fmj.ModEnvironment;
+import net.fabricmc.loom.util.fmj.FabricModJsonSource;
+
+@ApiStatus.Experimental
+public interface ModJson {
+	String getId();
+	String getModVersion();
+	@Nullable
+	String getModName();
+
+	List<String> getMixinConfigurations();
+
+	Map<String, ModEnvironment> getClassTweakers();
+
+	@Nullable
+	JsonElement getInjectedInterfaces();
+
+	FabricModJsonSource getSource();
+
+	@Nullable
+	String getProvidedJavadocPath();
+	JsonObject stripNestedJars(JsonObject json);
+	JsonObject addNestedJars(JsonObject json, List<String> files);
+}
diff --git a/src/main/java/net/fabricmc/loom/api/processor/SpecContext.java b/src/main/java/net/fabricmc/loom/api/processor/SpecContext.java
index e0480168c7231e6a3ab09dd1d1e0beccc679c9a3..af78c5ee1cb008ad7a08a66291555413c2027779 100644
--- a/src/main/java/net/fabricmc/loom/api/processor/SpecContext.java
+++ b/src/main/java/net/fabricmc/loom/api/processor/SpecContext.java
@@ -27,17 +27,17 @@ package net.fabricmc.loom.api.processor;
 import java.util.List;
 import java.util.stream.Stream;
 
-import net.fabricmc.loom.util.fmj.FabricModJson;
+import net.fabricmc.loom.api.metadata.ModJson;
 
 public interface SpecContext {
-	List<FabricModJson> modDependencies();
+	List<ModJson> modDependencies();
 
-	List<FabricModJson> localMods();
+	List<ModJson> localMods();
 
 	// Returns mods that are both on the compile and runtime classpath
-	List<FabricModJson> modDependenciesCompileRuntime();
+	List<ModJson> modDependenciesCompileRuntime();
 
-	default List<FabricModJson> allMods() {
+	default List<ModJson> allMods() {
 		return Stream.concat(modDependencies().stream(), localMods().stream()).toList();
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java b/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java
index e495d6a8351132b1e8b89a7f20b3ecc60f7f8d7f..8366c6d8afa218ce5900d0fa40b07cba0c082244 100644
--- a/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java
+++ b/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java
@@ -27,20 +27,21 @@ package net.fabricmc.loom.build.nesting;
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.List;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 import com.google.common.base.Preconditions;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import org.gradle.api.UncheckedIOException;
 import org.slf4j.Logger;
 
+import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
 import net.fabricmc.loom.util.Pair;
 import net.fabricmc.loom.util.ZipUtils;
-import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
 
 public class JarNester {
 	public static void nestJars(Collection<File> jars, File modJar, Logger logger) {
@@ -49,7 +50,14 @@ public class JarNester {
 			return;
 		}
 
-		Preconditions.checkArgument(FabricModJsonFactory.isModJar(modJar), "Cannot nest jars into none mod jar " + modJar.getName());
+		Preconditions.checkArgument(FabricModJsonFactory.isModJar(modJar), "Cannot nest jars into non-mod jar " + modJar.getName());
+		List<String> files = new ArrayList<>();
+
+		for (File file : jars) {
+			String nestedJarPath = "META-INF/jars/" + file.getName();
+			Preconditions.checkArgument(FabricModJsonFactory.isModJar(file), "Cannot nest non-mod jar: " + file.getName());
+			files.add(nestedJarPath);
+		}
 
 		try {
 			ZipUtils.add(modJar.toPath(), jars.stream().map(file -> {
@@ -60,38 +68,9 @@ public class JarNester {
 				}
 			}).collect(Collectors.toList()));
 
-			int count = ZipUtils.transformJson(JsonObject.class, modJar.toPath(), Stream.of(new Pair<>("fabric.mod.json", json -> {
-				JsonArray nestedJars = json.getAsJsonArray("jars");
-
-				if (nestedJars == null || !json.has("jars")) {
-					nestedJars = new JsonArray();
-				}
-
-				for (File file : jars) {
-					String nestedJarPath = "META-INF/jars/" + file.getName();
-					Preconditions.checkArgument(FabricModJsonFactory.isModJar(file), "Cannot nest none mod jar: " + file.getName());
-
-					for (JsonElement nestedJar : nestedJars) {
-						JsonObject jsonObject = nestedJar.getAsJsonObject();
-
-						if (jsonObject.has("file") && jsonObject.get("file").getAsString().equals(nestedJarPath)) {
-							throw new IllegalStateException("Cannot nest 2 jars at the same path: " + nestedJarPath);
-						}
-					}
-
-					JsonObject jsonObject = new JsonObject();
-					jsonObject.addProperty("file", nestedJarPath);
-					nestedJars.add(jsonObject);
-
-					logger.debug("Nested " + nestedJarPath + " into " + modJar.getName());
-				}
-
-				json.add("jars", nestedJars);
-
-				return json;
-			})));
+			int count = ZipUtils.transformJson(JsonObject.class, modJar.toPath(), Stream.of(new Pair<>(FabricModJsonFactory.getMetadataPath(modJar.toPath()), json -> ModJsonFactory.createFromZip(modJar.toPath()).addNestedJars(json, files))));
 
-			Preconditions.checkState(count > 0, "Failed to transform fabric.mod.json");
+			Preconditions.checkState(count > 0, "Failed to transform mod metadata file");
 		} catch (IOException e) {
 			throw new java.io.UncheckedIOException("Failed to nest jars into " + modJar.getName(), e);
 		}
diff --git a/src/main/java/net/fabricmc/loom/configuration/FabricApiExtension.java b/src/main/java/net/fabricmc/loom/configuration/FabricApiExtension.java
index 67d97342cca46d64d45ea545dcc48b246e7973ed..95709db93959da80a5d49fb250392199bd3a655b 100644
--- a/src/main/java/net/fabricmc/loom/configuration/FabricApiExtension.java
+++ b/src/main/java/net/fabricmc/loom/configuration/FabricApiExtension.java
@@ -56,8 +56,8 @@ import org.w3c.dom.NodeList;
 
 import net.fabricmc.loom.LoomGradleExtension;
 import net.fabricmc.loom.util.download.DownloadException;
-import net.fabricmc.loom.util.fmj.FabricModJson;
-import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
+import net.fabricmc.loom.api.metadata.ModJson;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
 import net.fabricmc.loom.util.gradle.SourceSetHelper;
 
 public abstract class FabricApiExtension {
@@ -159,10 +159,10 @@ public abstract class FabricApiExtension {
 
 			settings.getModId().convention(getProject().provider(() -> {
 				try {
-					final FabricModJson fabricModJson = FabricModJsonFactory.createFromSourceSetsNullable(dataGenSourceSet);
+					final ModJson fabricModJson = ModJsonFactory.createFromSourceSetsNullable(dataGenSourceSet);
 
 					if (fabricModJson == null) {
-						throw new RuntimeException("Could not find a fabric.mod.json file in the data source set or a value for DataGenerationSettings.getModId()");
+						throw new RuntimeException("Could not find a mod metadata file in the data source set or a value for DataGenerationSettings.getModId()");
 					}
 
 					return fabricModJson.getId();
diff --git a/src/main/java/net/fabricmc/loom/configuration/FileDependencyInfo.java b/src/main/java/net/fabricmc/loom/configuration/FileDependencyInfo.java
index 603b4c63616f269b5365b1ee7c6d6b669b2d3449..c977a7c51fa2ca7d6dff5ed6900aad9b9d949a0f 100644
--- a/src/main/java/net/fabricmc/loom/configuration/FileDependencyInfo.java
+++ b/src/main/java/net/fabricmc/loom/configuration/FileDependencyInfo.java
@@ -25,9 +25,6 @@
 package net.fabricmc.loom.configuration;
 
 import java.io.File;
-import java.io.IOException;
-import java.io.UncheckedIOException;
-import java.nio.charset.StandardCharsets;
 import java.util.Comparator;
 import java.util.HashMap;
 import java.util.List;
@@ -36,8 +33,6 @@ import java.util.Set;
 import java.util.stream.Collectors;
 
 import com.google.common.collect.Iterables;
-import com.google.gson.Gson;
-import com.google.gson.JsonObject;
 import org.apache.commons.io.FilenameUtils;
 import org.gradle.api.InvalidUserDataException;
 import org.gradle.api.Project;
@@ -45,7 +40,8 @@ import org.gradle.api.artifacts.Configuration;
 import org.gradle.api.artifacts.Dependency;
 import org.gradle.api.artifacts.FileCollectionDependency;
 
-import net.fabricmc.loom.util.ZipUtils;
+import net.fabricmc.loom.api.metadata.ModJson;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
 
 public class FileDependencyInfo extends DependencyInfo {
 	protected final Map<String, File> classifierToFile = new HashMap<>();
@@ -101,31 +97,28 @@ public class FileDependencyInfo extends DependencyInfo {
 		} else {
 			group = "net.fabricmc.synthetic";
 			File root = classifierToFile.get(""); //We've built the classifierToFile map, now to try find a name and version for our dependency
-			byte[] modJson;
-
-			try {
-				if ("jar".equals(FilenameUtils.getExtension(root.getName())) && (modJson = ZipUtils.unpackNullable(root.toPath(), "fabric.mod.json")) != null) {
-					//It's a Fabric mod, see how much we can extract out
-					JsonObject json = new Gson().fromJson(new String(modJson, StandardCharsets.UTF_8), JsonObject.class);
-
-					if (json == null || !json.has("id") || !json.has("version")) {
-						throw new IllegalArgumentException("Invalid Fabric mod jar: " + root + " (malformed json: " + json + ')');
-					}
-
-					if (json.has("name")) { //Go for the name field if it's got one
-						name = json.get("name").getAsString();
-					} else {
-						name = json.get("id").getAsString();
-					}
-
-					version = json.get("version").getAsString();
-				} else {
-					//Not a Fabric mod, just have to make something up
-					name = FilenameUtils.removeExtension(root.getName());
-					version = "1.0";
+
+			ModJson metadata;
+
+			if ("jar".equals(FilenameUtils.getExtension(root.getName())) && (metadata = ModJsonFactory.createFromZipNullable(root.toPath())) != null) {
+				//It has metadata we can parse; try to extract as much as we can out of it
+				String name = metadata.getModName();
+
+				if (name == null) {
+					name = metadata.getId();
+				}
+
+				this.name = name;
+
+				version = metadata.getModVersion();
+
+				if (version == null) {
+					throw new IllegalArgumentException("Invalid mod jar (no version): " + root);
 				}
-			} catch (IOException e) {
-				throw new UncheckedIOException("Failed to read input file: " + root, e);
+			} else {
+				//Not a Fabric mod, just have to make something up
+				name = FilenameUtils.removeExtension(root.getName());
+				version = "1.0";
 			}
 		}
 	}
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerEntry.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerEntry.java
index 802b7c85bf1a58fbf1d2cf3575ee55d388323999..3dc5abf18094fa3cd9766eb877b992e336dcd0f7 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerEntry.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerEntry.java
@@ -29,8 +29,8 @@ import java.io.IOException;
 import org.jetbrains.annotations.Nullable;
 
 import net.fabricmc.accesswidener.AccessWidenerVisitor;
-import net.fabricmc.loom.util.LazyCloseable;
 import net.fabricmc.loom.util.fmj.ModEnvironment;
+import net.fabricmc.loom.util.LazyCloseable;
 import net.fabricmc.tinyremapper.TinyRemapper;
 
 public interface AccessWidenerEntry {
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java
index 72c39b417441a0fbb590cb19c30c0911a2737333..d0ea700d17f3e3e829ee0759007c14cad20faea0 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java
@@ -24,63 +24,14 @@
 
 package net.fabricmc.loom.configuration.accesswidener;
 
-import java.io.IOException;
-import java.io.UncheckedIOException;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.Path;
 import java.util.Arrays;
 import java.util.Objects;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonObject;
-
-import net.fabricmc.loom.util.ZipUtils;
-
 public record AccessWidenerFile(
 		String path,
 		String modId,
 		byte[] content
 ) {
-	/**
-	 * Reads the access-widener contained in a mod jar, or returns null if there is none.
-	 */
-	public static AccessWidenerFile fromModJar(Path modJarPath) {
-		byte[] modJsonBytes;
-
-		try {
-			modJsonBytes = ZipUtils.unpackNullable(modJarPath, "fabric.mod.json");
-		} catch (IOException e) {
-			throw new UncheckedIOException("Failed to read access-widener file from: " + modJarPath.toAbsolutePath(), e);
-		}
-
-		if (modJsonBytes == null) {
-			return null;
-		}
-
-		JsonObject jsonObject = new Gson().fromJson(new String(modJsonBytes, StandardCharsets.UTF_8), JsonObject.class);
-
-		if (!jsonObject.has("accessWidener")) {
-			return null;
-		}
-
-		String awPath = jsonObject.get("accessWidener").getAsString();
-		String modId = jsonObject.get("id").getAsString();
-
-		byte[] content;
-
-		try {
-			content = ZipUtils.unpack(modJarPath, awPath);
-		} catch (IOException e) {
-			throw new UncheckedIOException("Could not find access widener file (%s) defined in the fabric.mod.json file of %s".formatted(awPath, modJarPath.toAbsolutePath()), e);
-		}
-
-		return new AccessWidenerFile(
-				awPath,
-				modId,
-				content
-		);
-	}
-
 	@Override
 	public int hashCode() {
 		int result = Objects.hash(path, modId);
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerJarProcessor.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerJarProcessor.java
index 212ef9328c791e2e1d0f740e99c4fcc055c7d299..bb911f77efbe3de475af4562cbcc4d4bd8e38736 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerJarProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerJarProcessor.java
@@ -40,12 +40,12 @@ import org.jetbrains.annotations.Nullable;
 
 import net.fabricmc.accesswidener.AccessWidener;
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
+import net.fabricmc.loom.api.metadata.ModJson;
 import net.fabricmc.loom.api.processor.MinecraftJarProcessor;
 import net.fabricmc.loom.api.processor.ProcessorContext;
 import net.fabricmc.loom.api.processor.SpecContext;
-import net.fabricmc.loom.util.LazyCloseable;
-import net.fabricmc.loom.util.fmj.FabricModJson;
 import net.fabricmc.loom.util.fmj.ModEnvironment;
+import net.fabricmc.loom.util.LazyCloseable;
 import net.fabricmc.tinyremapper.TinyRemapper;
 
 public class AccessWidenerJarProcessor implements MinecraftJarProcessor<AccessWidenerJarProcessor.Spec> {
@@ -84,8 +84,8 @@ public class AccessWidenerJarProcessor implements MinecraftJarProcessor<AccessWi
 		 */
 
 		if (includeTransitive) {
-			for (FabricModJson fabricModJson : context.modDependencies()) {
-				accessWideners.addAll(ModAccessWidenerEntry.readAll(fabricModJson, true));
+			for (ModJson modJson : context.modDependencies()) {
+				accessWideners.addAll(ModAccessWidenerEntry.readAll(modJson, true));
 			}
 		}
 
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/LocalAccessWidenerEntry.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/LocalAccessWidenerEntry.java
index 3d51e3e71a986fb47d70809a523cf5a627700de3..6d514743ecc30aa70101f90a390003ad19a8fd63 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/LocalAccessWidenerEntry.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/LocalAccessWidenerEntry.java
@@ -33,9 +33,9 @@ import org.jetbrains.annotations.Nullable;
 
 import net.fabricmc.accesswidener.AccessWidenerReader;
 import net.fabricmc.accesswidener.AccessWidenerVisitor;
+import net.fabricmc.loom.util.fmj.ModEnvironment;
 import net.fabricmc.loom.util.Checksum;
 import net.fabricmc.loom.util.LazyCloseable;
-import net.fabricmc.loom.util.fmj.ModEnvironment;
 import net.fabricmc.tinyremapper.TinyRemapper;
 
 public record LocalAccessWidenerEntry(Path path, String hash) implements AccessWidenerEntry {
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/ModAccessWidenerEntry.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/ModAccessWidenerEntry.java
index 4731422ca79b2b0032090034d71305749a579675..7e8812f74185f5398a05b9049d93693afde682f8 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/ModAccessWidenerEntry.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/ModAccessWidenerEntry.java
@@ -37,16 +37,17 @@ import net.fabricmc.accesswidener.AccessWidenerRemapper;
 import net.fabricmc.accesswidener.AccessWidenerVisitor;
 import net.fabricmc.accesswidener.TransitiveOnlyFilter;
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
+import net.fabricmc.loom.api.metadata.ModJson;
+import net.fabricmc.loom.util.fmj.ModEnvironment;
 import net.fabricmc.loom.util.LazyCloseable;
 import net.fabricmc.loom.util.fmj.FabricModJson;
-import net.fabricmc.loom.util.fmj.ModEnvironment;
 import net.fabricmc.tinyremapper.TinyRemapper;
 
 /**
  * {@link AccessWidenerEntry} implementation for a {@link FabricModJson}.
  */
-public record ModAccessWidenerEntry(FabricModJson mod, String path, ModEnvironment environment, boolean transitiveOnly) implements AccessWidenerEntry {
-	public static List<ModAccessWidenerEntry> readAll(FabricModJson modJson, boolean transitiveOnly) {
+public record ModAccessWidenerEntry(ModJson mod, String path, ModEnvironment environment, boolean transitiveOnly) implements AccessWidenerEntry {
+	public static List<ModAccessWidenerEntry> readAll(ModJson modJson, boolean transitiveOnly) {
 		var entries = new ArrayList<ModAccessWidenerEntry>();
 
 		for (Map.Entry<String, ModEnvironment> entry : modJson.getClassTweakers().entrySet()) {
diff --git a/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java b/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java
index 1e6c1391e329ab32e94f4b00e29ac827836ff0a5..c5687c124307186649869041d2d3637bcd4afb6e 100644
--- a/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java
@@ -53,6 +53,7 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
+import net.fabricmc.loom.api.metadata.ModJson;
 import net.fabricmc.loom.api.processor.MinecraftJarProcessor;
 import net.fabricmc.loom.api.processor.ProcessorContext;
 import net.fabricmc.loom.api.processor.SpecContext;
@@ -60,7 +61,6 @@ import net.fabricmc.loom.util.Constants;
 import net.fabricmc.loom.util.LazyCloseable;
 import net.fabricmc.loom.util.Pair;
 import net.fabricmc.loom.util.ZipUtils;
-import net.fabricmc.loom.util.fmj.FabricModJson;
 import net.fabricmc.mappingio.tree.MappingTree;
 import net.fabricmc.mappingio.tree.MemoryMappingTree;
 import net.fabricmc.tinyremapper.TinyRemapper;
@@ -217,9 +217,9 @@ public abstract class InterfaceInjectionProcessor implements MinecraftJarProcess
 	}
 
 	private record InjectedInterface(String modId, String className, String ifaceName, @Nullable String generics) {
-		public static List<InjectedInterface> fromMod(FabricModJson fabricModJson) {
-			final String modId = fabricModJson.getId();
-			final JsonElement jsonElement = fabricModJson.getCustom(Constants.CustomModJsonKeys.INJECTED_INTERFACE);
+		public static List<InjectedInterface> fromMod(ModJson modJson) {
+			final String modId = modJson.getId();
+			final JsonElement jsonElement = modJson.getInjectedInterfaces();
 
 			if (jsonElement == null) {
 				return Collections.emptyList();
@@ -255,8 +255,8 @@ public abstract class InterfaceInjectionProcessor implements MinecraftJarProcess
 			return result;
 		}
 
-		public static List<InjectedInterface> fromMods(List<FabricModJson> fabricModJsons) {
-			return fabricModJsons.stream()
+		public static List<InjectedInterface> fromMods(List<ModJson> modJsons) {
+			return modJsons.stream()
 					.map(InjectedInterface::fromMod)
 					.flatMap(List::stream)
 					.toList();
diff --git a/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java b/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java
index 725e4fb11c74c5bfb884c4fb62839f74c8ecfc26..94051a2f75ded30c9b49042b3762999a9adb7795 100644
--- a/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java
+++ b/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java
@@ -28,14 +28,16 @@ import java.io.IOException;
 import java.nio.file.Path;
 import java.util.List;
 
+import org.jetbrains.annotations.Nullable;
 import org.objectweb.asm.commons.Remapper;
 
 import net.fabricmc.accesswidener.AccessWidenerReader;
 import net.fabricmc.accesswidener.AccessWidenerRemapper;
 import net.fabricmc.accesswidener.AccessWidenerWriter;
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
-import net.fabricmc.loom.util.fmj.FabricModJson;
+import net.fabricmc.loom.api.metadata.ModJson;
 import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
 
 public class AccessWidenerUtils {
 	/**
@@ -56,13 +58,14 @@ public class AccessWidenerUtils {
 		return writer.write();
 	}
 
+	@Nullable
 	public static AccessWidenerData readAccessWidenerData(Path inputJar) throws IOException {
 		if (!FabricModJsonFactory.isModJar(inputJar)) {
 			return null;
 		}
 
-		final FabricModJson fabricModJson = FabricModJsonFactory.createFromZip(inputJar);
-		final List<String> classTweakers = List.copyOf(fabricModJson.getClassTweakers().keySet());
+		final ModJson modJson = ModJsonFactory.createFromZip(inputJar);
+		final List<String> classTweakers = List.copyOf(modJson.getClassTweakers().keySet());
 
 		if (classTweakers.isEmpty()) {
 			return null;
@@ -73,7 +76,7 @@ public class AccessWidenerUtils {
 		}
 
 		final String accessWidenerPath = classTweakers.get(0);
-		final byte[] accessWidener = fabricModJson.getSource().read(accessWidenerPath);
+		final byte[] accessWidener = modJson.getSource().read(accessWidenerPath);
 		final AccessWidenerReader.Header header = AccessWidenerReader.readHeader(accessWidener);
 
 		return new AccessWidenerData(accessWidenerPath, header, accessWidener);
diff --git a/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java b/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java
index f657b1e945597b9d09cd454967e3d512f54bd9cf..e1e0d0eb980caab8b2314835ec68107ae8230a91 100644
--- a/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java
+++ b/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java
@@ -42,9 +42,9 @@ import org.jetbrains.annotations.Nullable;
 
 import net.fabricmc.loom.LoomGradlePlugin;
 import net.fabricmc.loom.configuration.InstallerData;
+import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
 import net.fabricmc.loom.util.Constants;
 import net.fabricmc.loom.util.FileSystemUtil;
-import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
 
 public record ArtifactMetadata(boolean isFabricMod, RemapRequirements remapRequirements, @Nullable InstallerData installerData, MixinRemapType mixinRemapType, List<String> knownIdyBsms) {
 	private static final String QUILT_INSTALLER_PATH = "quilt_installer.json";
diff --git a/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java b/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java
index bf10eb071b244720521860e85af02380a94d82c4..1ec8c2a072f7b5a10b77c7f95042de2f355b7fd0 100644
--- a/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java
+++ b/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java
@@ -41,11 +41,6 @@ import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Supplier;
 
 import com.google.common.collect.ImmutableMap;
-
-import net.fabricmc.loom.configuration.InstallerData;
-
-import net.fabricmc.loom.configuration.mods.dependency.ModDependencyFactory;
-
 import org.gradle.api.Project;
 import org.gradle.api.artifacts.Configuration;
 import org.gradle.api.artifacts.FileCollectionDependency;
@@ -69,6 +64,7 @@ import net.fabricmc.loom.LoomGradlePlugin;
 import net.fabricmc.loom.api.RemapConfigurationSettings;
 import net.fabricmc.loom.configuration.RemapConfigurations;
 import net.fabricmc.loom.configuration.mods.dependency.ModDependency;
+import net.fabricmc.loom.configuration.mods.dependency.ModDependencyFactory;
 import net.fabricmc.loom.configuration.providers.minecraft.MinecraftSourceSets;
 import net.fabricmc.loom.util.Checksum;
 import net.fabricmc.loom.util.Constants;
@@ -206,14 +202,14 @@ public class ModConfigurationRemapper {
 		if (installer.get() != null) {
 			project.getLogger().info("Applying installer data");
 
-            if (installer.get().installerData().isQuilt()) {
-                quiltLoader = true;
-            } else {
+			if (installer.get().installerData().isQuilt()) {
+				quiltLoader = true;
+			} else {
 				quiltLoader = false;
 				project.getLogger().lifecycle("Warning: Quilt Loader not detected. Using Fabric Loader.");
-            }
+			}
 
-            if (!installer.get().shouldRemap()) {
+			if (!installer.get().shouldRemap()) {
 				installerArtifactToApply.get().applyToConfiguration(project, installerConfigToApply.get());
 			}
 
@@ -239,6 +235,7 @@ public class ModConfigurationRemapper {
 				} else if (sourceConfigsWithQsl.contains(sourceConfig) && artifact.group().equals("net.fabricmc.fabric-api")) {
 					continue;
 				}
+
 				final ModDependency modDependency = ModDependencyFactory.create(artifact, metaCache.get(artifact), remappedConfig, clientRemappedConfig, mappingsSuffix, project);
 				scheduleSourcesRemapping(project, sourceRemapper, modDependency);
 				modDependencies.add(modDependency);
diff --git a/src/main/java/net/fabricmc/loom/configuration/mods/ModProcessor.java b/src/main/java/net/fabricmc/loom/configuration/mods/ModProcessor.java
index b9e7b8cc1f03cd4bed4f70b5562b646dce60500e..0367286af9bc166e9dc0a9ea12930bc7285d342a 100644
--- a/src/main/java/net/fabricmc/loom/configuration/mods/ModProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/mods/ModProcessor.java
@@ -49,6 +49,7 @@ import org.gradle.api.attributes.Usage;
 import net.fabricmc.loom.LoomGradleExtension;
 import net.fabricmc.loom.api.RemapConfigurationSettings;
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
+import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
 import net.fabricmc.loom.configuration.mods.dependency.ModDependency;
 import net.fabricmc.loom.configuration.providers.mappings.MappingConfiguration;
 import net.fabricmc.loom.extension.RemapperExtensionHolder;
@@ -58,6 +59,7 @@ import net.fabricmc.loom.util.TinyRemapperHelper;
 import net.fabricmc.loom.util.ZipUtils;
 import net.fabricmc.loom.util.kotlin.KotlinClasspathService;
 import net.fabricmc.loom.util.kotlin.KotlinRemapperClassloader;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
 import net.fabricmc.loom.util.service.ServiceFactory;
 import net.fabricmc.tinyremapper.InputTag;
 import net.fabricmc.tinyremapper.NonClassCopyMode;
@@ -120,10 +122,7 @@ public class ModProcessor {
 	private void stripNestedJars(Path path) {
 		// Strip out all contained jar info as we dont want loader to try and load the jars contained in dev.
 		try {
-			ZipUtils.transformJson(JsonObject.class, path, Map.of("fabric.mod.json", json -> {
-				json.remove("jars");
-				return json;
-			}));
+			ZipUtils.transformJson(JsonObject.class, path, Map.of(FabricModJsonFactory.getMetadataPath(path), json -> ModJsonFactory.createFromZip(path).stripNestedJars(json)));
 		} catch (IOException e) {
 			throw new UncheckedIOException("Failed to strip nested jars from %s".formatted(path), e);
 		}
diff --git a/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java b/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java
index 781ca37f2c763de0acbcb9254792052289ed00f9..ffdef6f8a9d6ae671c65a0068ec04426310e0474 100644
--- a/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java
@@ -38,18 +38,16 @@ import java.util.Objects;
 
 import javax.inject.Inject;
 
-import com.google.gson.JsonElement;
 import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
+import net.fabricmc.loom.api.metadata.ModJson;
 import net.fabricmc.loom.api.processor.MinecraftJarProcessor;
 import net.fabricmc.loom.api.processor.ProcessorContext;
 import net.fabricmc.loom.api.processor.SpecContext;
 import net.fabricmc.loom.util.Checksum;
-import net.fabricmc.loom.util.Constants;
-import net.fabricmc.loom.util.fmj.FabricModJson;
 import net.fabricmc.mappingio.MappingReader;
 import net.fabricmc.mappingio.tree.MappingTree;
 import net.fabricmc.mappingio.tree.MemoryMappingTree;
@@ -73,8 +71,8 @@ public abstract class ModJavadocProcessor implements MinecraftJarProcessor<ModJa
 	public @Nullable ModJavadocProcessor.Spec buildSpec(SpecContext context) {
 		List<ModJavadoc> javadocs = new ArrayList<>();
 
-		for (FabricModJson fabricModJson : context.allMods()) {
-			ModJavadoc javadoc = ModJavadoc.create(fabricModJson);
+		for (ModJson modJson : context.allMods()) {
+			ModJavadoc javadoc = ModJavadoc.create(modJson);
 
 			if (javadoc != null) {
 				javadocs.add(javadoc);
@@ -110,20 +108,19 @@ public abstract class ModJavadocProcessor implements MinecraftJarProcessor<ModJa
 
 	public record ModJavadoc(String modId, MemoryMappingTree mappingTree, String mappingsHash) {
 		@Nullable
-		public static ModJavadoc create(FabricModJson fabricModJson) {
-			final String modId = fabricModJson.getId();
-			final JsonElement customElement = fabricModJson.getCustom(Constants.CustomModJsonKeys.PROVIDED_JAVADOC);
+		public static ModJavadoc create(ModJson modJson) {
+			final String modId = modJson.getId();
+			final String javaDocPath = modJson.getProvidedJavadocPath();
 
-			if (customElement == null) {
+			if (javaDocPath == null) {
 				return null;
 			}
 
-			final String javaDocPath = customElement.getAsString();
 			final MemoryMappingTree mappings = new MemoryMappingTree();
 			final String mappingsHash;
 
 			try {
-				final byte[] data = fabricModJson.getSource().read(javaDocPath);
+				final byte[] data = modJson.getSource().read(javaDocPath);
 				mappingsHash = Checksum.sha1Hex(data);
 
 				try (Reader reader = new InputStreamReader(new ByteArrayInputStream(data))) {
diff --git a/src/main/java/net/fabricmc/loom/configuration/processors/SpecContextImpl.java b/src/main/java/net/fabricmc/loom/configuration/processors/SpecContextImpl.java
index 1882634657e0577535692328df1b00a730abb5ae..4d6290fbb6fa8acb698824e718b906facdc6b003 100644
--- a/src/main/java/net/fabricmc/loom/configuration/processors/SpecContextImpl.java
+++ b/src/main/java/net/fabricmc/loom/configuration/processors/SpecContextImpl.java
@@ -45,35 +45,35 @@ import org.gradle.api.plugins.JavaPlugin;
 
 import net.fabricmc.loom.LoomGradleExtension;
 import net.fabricmc.loom.api.RemapConfigurationSettings;
+import net.fabricmc.loom.api.metadata.ModJson;
 import net.fabricmc.loom.api.processor.SpecContext;
-import net.fabricmc.loom.util.Constants;
-import net.fabricmc.loom.util.fmj.FabricModJson;
-import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
 import net.fabricmc.loom.util.fmj.FabricModJsonHelpers;
+import net.fabricmc.loom.util.Constants;
 import net.fabricmc.loom.util.gradle.GradleUtils;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
 
 /**
  * @param modDependencies External mods that are depended on
  * @param localMods Mods found in the current project.
  * @param compileRuntimeMods Dependent mods found in both the compile and runtime classpath.
  */
-public record SpecContextImpl(List<FabricModJson> modDependencies, List<FabricModJson> localMods, List<FabricModJson> compileRuntimeMods) implements SpecContext {
+public record SpecContextImpl(List<ModJson> modDependencies, List<ModJson> localMods, List<ModJson> compileRuntimeMods) implements SpecContext {
 	public static SpecContextImpl create(Project project) {
-		final Map<String, List<FabricModJson>> fmjCache = new HashMap<>();
+		final Map<String, List<ModJson>> fmjCache = new HashMap<>();
 		return new SpecContextImpl(getDependentMods(project, fmjCache), FabricModJsonHelpers.getModsInProject(project), getCompileRuntimeMods(project, fmjCache));
 	}
 
 	// Reruns a list of mods found on both the compile and/or runtime classpaths
-	private static List<FabricModJson> getDependentMods(Project project, Map<String, List<FabricModJson>> fmjCache) {
+	private static List<ModJson> getDependentMods(Project project, Map<String, List<ModJson>> fmjCache) {
 		final LoomGradleExtension extension = LoomGradleExtension.get(project);
-		var mods = new ArrayList<FabricModJson>();
+		var mods = new ArrayList<ModJson>();
 
 		for (RemapConfigurationSettings entry : extension.getRemapConfigurations()) {
 			final Set<File> artifacts = entry.getSourceConfiguration().get().resolve();
 
 			for (File artifact : artifacts) {
-				final List<FabricModJson> fabricModJson = fmjCache.computeIfAbsent(artifact.toPath().toAbsolutePath().toString(), $ -> {
-					return FabricModJsonFactory.createFromZipOptional(artifact.toPath())
+				final List<ModJson> fabricModJson = fmjCache.computeIfAbsent(artifact.toPath().toAbsolutePath().toString(), $ -> {
+					return (List<ModJson>) ModJsonFactory.createFromZipOptional(artifact.toPath())
 							.map(List::of)
 							.orElseGet(List::of);
 				});
@@ -105,7 +105,7 @@ public record SpecContextImpl(List<FabricModJson> modDependencies, List<FabricMo
 	}
 
 	// Returns a list of mods that are on both to compile and runtime classpath
-	private static List<FabricModJson> getCompileRuntimeMods(Project project, Map<String, List<FabricModJson>> fmjCache) {
+	private static List<ModJson> getCompileRuntimeMods(Project project, Map<String, List<ModJson>> fmjCache) {
 		var mods = new ArrayList<>(getCompileRuntimeModsFromRemapConfigs(project, fmjCache).toList());
 
 		for (Project dependentProject : getCompileRuntimeProjectDependencies(project).toList()) {
@@ -118,7 +118,7 @@ public record SpecContextImpl(List<FabricModJson> modDependencies, List<FabricMo
 	}
 
 	// Returns a list of jar mods that are found on the compile and runtime remapping configurations
-	private static Stream<FabricModJson> getCompileRuntimeModsFromRemapConfigs(Project project, Map<String, List<FabricModJson>> fmjCache) {
+	private static Stream<ModJson> getCompileRuntimeModsFromRemapConfigs(Project project, Map<String, List<ModJson>> fmjCache) {
 		final LoomGradleExtension extension = LoomGradleExtension.get(project);
 		final List<Path> runtimeEntries = extension.getRuntimeRemapConfigurations().stream()
 				.filter(settings -> settings.getApplyDependencyTransforms().get())
@@ -130,15 +130,15 @@ public record SpecContextImpl(List<FabricModJson> modDependencies, List<FabricMo
 				.flatMap(resolveArtifacts(project, false))
 				.filter(runtimeEntries::contains) // Use the intersection of the two configurations.
 				.map(zipPath -> {
-					final List<FabricModJson> list = fmjCache.computeIfAbsent(zipPath.toAbsolutePath().toString(), $ -> {
-						return FabricModJsonFactory.createFromZipOptional(zipPath)
+					final List<ModJson> list = fmjCache.computeIfAbsent(zipPath.toAbsolutePath().toString(), $ -> {
+						return (List<ModJson>) ModJsonFactory.createFromZipOptional(zipPath)
 								.map(List::of)
 								.orElseGet(List::of);
 					});
 					return list.isEmpty() ? null : list.get(0);
 				})
 				.filter(Objects::nonNull)
-				.sorted(Comparator.comparing(FabricModJson::getId));
+				.sorted(Comparator.comparing(ModJson::getId));
 	}
 
 	private static Function<RemapConfigurationSettings, Stream<Path>> resolveArtifacts(Project project, boolean runtime) {
@@ -171,12 +171,12 @@ public record SpecContextImpl(List<FabricModJson> modDependencies, List<FabricMo
 	}
 
 	// Sort to ensure stable caching
-	private static List<FabricModJson> sorted(List<FabricModJson> mods) {
-		return mods.stream().sorted(Comparator.comparing(FabricModJson::getId)).toList();
+	private static List<ModJson> sorted(List<ModJson> mods) {
+		return mods.stream().sorted(Comparator.comparing(ModJson::getId)).toList();
 	}
 
 	@Override
-	public List<FabricModJson> modDependenciesCompileRuntime() {
+	public List<ModJson> modDependenciesCompileRuntime() {
 		return compileRuntimeMods;
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/extension/LoomGradleExtensionApiImpl.java b/src/main/java/net/fabricmc/loom/extension/LoomGradleExtensionApiImpl.java
index 64d7524eb679a4287d0e3c9dfdc6b871b79db4c2..a8c83fd2eb723e96ab8a1c1995e15d4e51709b54 100644
--- a/src/main/java/net/fabricmc/loom/extension/LoomGradleExtensionApiImpl.java
+++ b/src/main/java/net/fabricmc/loom/extension/LoomGradleExtensionApiImpl.java
@@ -74,8 +74,8 @@ import net.fabricmc.loom.task.GenerateSourcesTask;
 import net.fabricmc.loom.util.Constants;
 import net.fabricmc.loom.util.DeprecationHelper;
 import net.fabricmc.loom.util.MirrorUtil;
-import net.fabricmc.loom.util.fmj.FabricModJson;
-import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
+import net.fabricmc.loom.api.metadata.ModJson;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
 import net.fabricmc.loom.util.gradle.SourceSetHelper;
 
 /**
@@ -295,7 +295,7 @@ public abstract class LoomGradleExtensionApiImpl implements LoomGradleExtensionA
 	@Override
 	public String getModVersion() {
 		try {
-			final FabricModJson fabricModJson = FabricModJsonFactory.createFromSourceSetsNullable(SourceSetHelper.getMainSourceSet(getProject()));
+			final ModJson fabricModJson = ModJsonFactory.createFromSourceSetsNullable(SourceSetHelper.getMainSourceSet(getProject()));
 
 			if (fabricModJson == null) {
 				throw new RuntimeException("Could not find a fabric.mod.json file in the main sourceset");
diff --git a/src/main/java/net/fabricmc/loom/task/RemapJarTask.java b/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
index a50d0a99615ff2a23013f90b9381f36ec713b9b9..c70ffbe4be44d5370db4e955b795fe9d7fc39d14 100644
--- a/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
+++ b/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
@@ -56,9 +56,9 @@ import net.fabricmc.accesswidener.AccessWidenerReader;
 import net.fabricmc.accesswidener.AccessWidenerRemapper;
 import net.fabricmc.accesswidener.AccessWidenerWriter;
 import net.fabricmc.loom.LoomGradleExtension;
+import net.fabricmc.loom.api.metadata.ModJson;
 import net.fabricmc.loom.build.nesting.JarNester;
 import net.fabricmc.loom.build.nesting.NestableJarGenerationTask;
-import net.fabricmc.loom.configuration.accesswidener.AccessWidenerFile;
 import net.fabricmc.loom.configuration.mods.ArtifactMetadata;
 import net.fabricmc.loom.task.service.ClientEntriesService;
 import net.fabricmc.loom.task.service.MixinRefmapService;
@@ -70,6 +70,7 @@ import net.fabricmc.loom.util.SidedClassVisitor;
 import net.fabricmc.loom.util.ZipUtils;
 import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
 import net.fabricmc.loom.util.fmj.FabricModJsonUtils;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
 import net.fabricmc.loom.util.service.ScopedServiceFactory;
 import net.fabricmc.loom.util.service.ServiceFactory;
 import net.fabricmc.tinyremapper.OutputConsumerPath;
@@ -250,16 +251,18 @@ public abstract class RemapJarTask extends AbstractRemapJarTask {
 				return;
 			}
 
-			final AccessWidenerFile accessWidenerFile = AccessWidenerFile.fromModJar(inputFile);
+			final ModJson metadata = ModJsonFactory.createFromZipNullable(inputFile);
 
-			if (accessWidenerFile == null) {
+			if (metadata == null) {
 				return;
 			}
 
-			byte[] remapped = remapAccessWidener(accessWidenerFile.content());
+			for (String awPath : metadata.getClassTweakers().keySet()) {
+				byte[] remapped = remapAccessWidener(ZipUtils.unpack(inputFile, awPath));
 
-			// Finally, replace the output with the remaped aw
-			ZipUtils.replace(outputFile, accessWidenerFile.path(), remapped);
+				// Finally, replace the output with the remaped aw
+				ZipUtils.replace(outputFile, awPath, remapped);
+			}
 		}
 
 		private byte[] remapAccessWidener(byte[] input) {
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJson.java b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJson.java
index 617019cb93a5722de3be614322f4143bb98f1efd..90a0712caa28ccf9dbb669acadaf57eb52e0e377 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJson.java
+++ b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJson.java
@@ -24,18 +24,19 @@
 
 package net.fabricmc.loom.util.fmj;
 
-import static net.fabricmc.loom.util.fmj.FabricModJsonUtils.readString;
-
 import java.util.List;
-import java.util.Map;
 import java.util.Objects;
 
+import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import org.jetbrains.annotations.Nullable;
 import org.jetbrains.annotations.VisibleForTesting;
 
-public abstract sealed class FabricModJson permits FabricModJsonV0, FabricModJsonV1, FabricModJsonV2, FabricModJson.Mockable {
+import net.fabricmc.loom.api.metadata.ModJson;
+import net.fabricmc.loom.util.Constants;
+
+public abstract sealed class FabricModJson implements ModJson permits FabricModJsonV0, FabricModJsonV1, FabricModJsonV2, FabricModJson.Mockable {
 	protected final JsonObject jsonObject;
 	private final FabricModJsonSource source;
 
@@ -44,30 +45,45 @@ public abstract sealed class FabricModJson permits FabricModJsonV0, FabricModJso
 		this.source = Objects.requireNonNull(source);
 	}
 
-	public abstract int getVersion();
-
+	@Override
 	public String getId() {
-		return readString(jsonObject, "id");
+		return FabricModJsonUtils.readString(jsonObject, "id");
 	}
 
+	@Override
 	public String getModVersion() {
-		return readString(jsonObject, "version");
+		return FabricModJsonUtils.readString(jsonObject, "version");
 	}
 
+	public abstract int getVersion();
+
 	@Nullable
 	public abstract JsonElement getCustom(String key);
 
-	public abstract List<String> getMixinConfigurations();
+	@Override
+	public JsonElement getInjectedInterfaces() {
+		return getCustom(Constants.CustomModJsonKeys.INJECTED_INTERFACE);
+	}
 
-	public abstract Map<String, ModEnvironment> getClassTweakers();
+	@Override
+	public @Nullable String getProvidedJavadocPath() {
+		JsonElement ret = getCustom(Constants.CustomModJsonKeys.PROVIDED_JAVADOC);
+		return ret != null ? ret.getAsString() : null;
+	}
+
+	@Override
+	public @Nullable String getModName() {
+		return FabricModJsonUtils.readStringOrNull(jsonObject, "name");
+	}
 
+	@Override
 	public final FabricModJsonSource getSource() {
 		return source;
 	}
 
 	@Override
 	public final String toString() {
-		return getClass().getName() + "[id=%s, version=%s, classTweakers=%s]".formatted(getId(), getVersion(), getClassTweakers());
+		return getClass().getName() + "[id=%s, version=%s]".formatted(getId(), getVersion());
 	}
 
 	@Override
@@ -82,4 +98,33 @@ public abstract sealed class FabricModJson permits FabricModJsonV0, FabricModJso
 			throw new AssertionError();
 		}
 	}
+
+	@Override
+	public JsonObject stripNestedJars(JsonObject json) {
+		json.remove("jars");
+		return json;
+	}
+
+	@Override
+	public JsonObject addNestedJars(JsonObject json, List<String> files) {
+		JsonArray nestedJars = json.has("jars") ? json.getAsJsonArray("jars") : new JsonArray();
+
+		for (String nestedJarPath: files) {
+			for (JsonElement nestedJar : nestedJars) {
+				JsonObject jarObject = nestedJar.getAsJsonObject();
+
+				if (jarObject.has("file") && jarObject.get("file").getAsString().equals(nestedJarPath)) {
+					throw new IllegalStateException("Cannot nest 2 jars at the same path: " + nestedJarPath);
+				}
+			}
+
+			JsonObject entry = new JsonObject();
+			entry.addProperty("file", nestedJarPath);
+			nestedJars.add(entry);
+		}
+
+		json.add("jars", nestedJars);
+
+		return json;
+	}
 }
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonFactory.java b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonFactory.java
index 8c64cecbe7b7a40e7ebc1b47a16eafb419443f7e..3f0c080f06f1b97067038d9a1708ee6582481c8e 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonFactory.java
+++ b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonFactory.java
@@ -32,6 +32,7 @@ import java.io.Reader;
 import java.io.UncheckedIOException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
+import java.nio.file.NoSuchFileException;
 import java.nio.file.Path;
 import java.util.Optional;
 
@@ -44,12 +45,13 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import net.fabricmc.loom.LoomGradlePlugin;
-import net.fabricmc.loom.util.FileSystemUtil;
 import net.fabricmc.loom.util.ZipUtils;
 import net.fabricmc.loom.util.gradle.SourceSetHelper;
+import net.fabricmc.loom.util.FileSystemUtil;
 
 public final class FabricModJsonFactory {
 	public static final String FABRIC_MOD_JSON = "fabric.mod.json";
+	public static final String QUILT_MOD_JSON = "quilt.mod.json";
 
 	private static final Logger LOGGER = LoggerFactory.getLogger(FabricModJsonFactory.class);
 
@@ -69,7 +71,7 @@ public final class FabricModJsonFactory {
 		case 0 -> new FabricModJsonV0(jsonObject, source);
 		case 1 -> new FabricModJsonV1(jsonObject, source);
 		case 2 -> new FabricModJsonV2(jsonObject, source);
-		default -> throw new UnsupportedOperationException(String.format("This version of fabric-loom doesn't support the newer fabric.mod.json schema version of (%s) Please update fabric-loom to be able to read this.", schemaVersion));
+		default -> throw new UnsupportedOperationException(String.format("This version of quilt-loom doesn't support the newer fabric.mod.json schema version of (%s) Please update quilt-loom to be able to read this.", schemaVersion));
 		};
 	}
 
@@ -117,7 +119,7 @@ public final class FabricModJsonFactory {
 		try (Reader reader = Files.newBufferedReader(file.toPath(), StandardCharsets.UTF_8)) {
 			return create(LoomGradlePlugin.GSON.fromJson(reader, JsonObject.class), new FabricModJsonSource.SourceSetSource(sourceSets));
 		} catch (JsonSyntaxException e) {
-			LOGGER.warn("Failed to parse fabric.mod.json: {}", file.getAbsolutePath());
+			LOGGER.warn("Failed to parse mod json: {}", file.getAbsolutePath());
 			return null;
 		} catch (IOException e) {
 			throw new UncheckedIOException("Failed to read " + file.getAbsolutePath(), e);
@@ -129,10 +131,26 @@ public final class FabricModJsonFactory {
 	}
 
 	public static boolean isModJar(Path input) {
-		return ZipUtils.contains(input, FABRIC_MOD_JSON);
+		return ZipUtils.contains(input, FabricModJsonHelpers.QUILT_MOD_JSON) || ZipUtils.contains(input, FabricModJsonHelpers.FABRIC_MOD_JSON);
 	}
 
 	public static boolean containsMod(FileSystemUtil.Delegate fs) {
-		return Files.exists(fs.getPath(FABRIC_MOD_JSON));
+		return Files.exists(fs.getPath(FabricModJsonHelpers.QUILT_MOD_JSON)) || Files.exists(fs.getPath(FabricModJsonHelpers.FABRIC_MOD_JSON));
+	}
+
+	public static boolean isQuiltMod(Path jar) {
+		try {
+			return ZipUtils.contains(jar, FabricModJsonHelpers.QUILT_MOD_JSON);
+		} catch (UncheckedIOException e) {
+			if (e.getCause() instanceof NoSuchFileException) {
+				return false;
+			} else {
+				throw e;
+			}
+		}
+	}
+
+	public static String getMetadataPath(Path jar) {
+		return isQuiltMod(jar) ? FabricModJsonHelpers.QUILT_MOD_JSON : FabricModJsonHelpers.FABRIC_MOD_JSON;
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonHelpers.java b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonHelpers.java
index 923c7a30d4d9785dbf26ef3f59f044197a53abe1..d0e1e13b984c9360bf60e3b63cf81121410eca45 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonHelpers.java
+++ b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonHelpers.java
@@ -34,11 +34,16 @@ import org.gradle.api.Project;
 import org.gradle.api.tasks.SourceSet;
 
 import net.fabricmc.loom.LoomGradleExtension;
+import net.fabricmc.loom.api.metadata.ModJson;
 import net.fabricmc.loom.util.gradle.SourceSetHelper;
+import net.fabricmc.loom.util.metadata.ModJsonFactory;
 
 public class FabricModJsonHelpers {
+	public static final String FABRIC_MOD_JSON = "fabric.mod.json";
+	public static final String QUILT_MOD_JSON = "quilt.mod.json";
+
 	// Returns a list of Mods found in the provided project's main or client sourcesets
-	public static List<FabricModJson> getModsInProject(Project project) {
+	public static List<ModJson> getModsInProject(Project project) {
 		final LoomGradleExtension extension = LoomGradleExtension.get(project);
 		var sourceSets = new ArrayList<SourceSet>();
 		sourceSets.add(SourceSetHelper.getMainSourceSet(project));
@@ -48,10 +53,10 @@ public class FabricModJsonHelpers {
 		}
 
 		try {
-			final FabricModJson fabricModJson = FabricModJsonFactory.createFromSourceSetsNullable(sourceSets.toArray(SourceSet[]::new));
+			final ModJson modJson = ModJsonFactory.createFromSourceSetsNullable(sourceSets.toArray(SourceSet[]::new));
 
-			if (fabricModJson != null) {
-				return List.of(fabricModJson);
+			if (modJson != null) {
+				return List.of(modJson);
 			}
 		} catch (IOException e) {
 			throw new UncheckedIOException(e);
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonSource.java b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonSource.java
index 9ff5a7d6a485619b887d5e39079327cc66a4d603..cf508030f568df35921734e377c1765a4a7f8690 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonSource.java
+++ b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonSource.java
@@ -31,6 +31,7 @@ import java.nio.file.Files;
 import java.nio.file.Path;
 
 import org.gradle.api.tasks.SourceSet;
+import org.jetbrains.annotations.NotNull;
 
 import net.fabricmc.loom.util.ZipUtils;
 import net.fabricmc.loom.util.gradle.SourceSetHelper;
@@ -40,25 +41,25 @@ import net.fabricmc.loom.util.gradle.SourceSetHelper;
  * This abstraction allows easily reading a contained file from the mod.
  */
 public interface FabricModJsonSource {
-	byte[] read(String path) throws IOException;
+	byte[] read(@NotNull String path) throws IOException;
 
 	record ZipSource(Path zipPath) implements FabricModJsonSource {
 		@Override
-		public byte[] read(String path) throws IOException {
+		public byte[] read(@NotNull String path) throws IOException {
 			return ZipUtils.unpack(zipPath, path);
 		}
 	}
 
 	record DirectorySource(Path directoryPath) implements FabricModJsonSource {
 		@Override
-		public byte[] read(String path) throws IOException {
+		public byte[] read(@NotNull String path) throws IOException {
 			return Files.readAllBytes(directoryPath.resolve(path));
 		}
 	}
 
 	record SourceSetSource(SourceSet... sourceSets) implements FabricModJsonSource {
 		@Override
-		public byte[] read(String path) throws IOException {
+		public byte[] read(@NotNull String path) throws IOException {
 			return Files.readAllBytes(findFile(path).toPath());
 		}
 
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonUtils.java b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonUtils.java
index d1c972ab1b9bcd040aa869c8d5104af1ed44acc4..ca4446828dd90412cd9751b05ce4b6dbd92d743c 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonUtils.java
+++ b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonUtils.java
@@ -31,6 +31,7 @@ import java.util.function.Predicate;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
+import org.jetbrains.annotations.Nullable;
 
 public final class FabricModJsonUtils {
 	private FabricModJsonUtils() {
@@ -43,6 +44,15 @@ public final class FabricModJsonUtils {
 		return element.getAsString();
 	}
 
+	@Nullable
+	public static String readStringOrNull(JsonObject jsonObject, String key) {
+		if (jsonObject != null && jsonObject.has(key)) {
+			return readString(jsonObject, key);
+		} else {
+			return null;
+		}
+	}
+
 	public static int readInt(JsonObject jsonObject, String key) {
 		final JsonElement element = getElement(jsonObject, key);
 		ensurePrimitive(element, JsonPrimitive::isNumber, key);
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV0.java b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV0.java
index 935b0cea80d8cd0aa83e1e9cbeba193d268b79c9..48e5a398da1402aa9c0c85fedbdeec4c1346cd3a 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV0.java
+++ b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV0.java
@@ -87,4 +87,9 @@ public final class FabricModJsonV0 extends FabricModJson {
 	public Map<String, ModEnvironment> getClassTweakers() {
 		return Collections.emptyMap();
 	}
+
+	@Override
+	public JsonElement getInjectedInterfaces() {
+		return null;
+	}
 }
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV1.java b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV1.java
index 16239e0bc34a9529bdb10393bbf23697ec504dd7..92ad87480fab5c8ad7a66c6be781b5436d472ca1 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV1.java
+++ b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonV1.java
@@ -24,8 +24,6 @@
 
 package net.fabricmc.loom.util.fmj;
 
-import static net.fabricmc.loom.util.fmj.FabricModJsonUtils.readString;
-
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -38,6 +36,8 @@ import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
 import org.jetbrains.annotations.Nullable;
 
+import net.fabricmc.loom.util.Constants;
+
 public final class FabricModJsonV1 extends FabricModJson {
 	FabricModJsonV1(JsonObject jsonObject, FabricModJsonSource source) {
 		super(jsonObject, source);
@@ -48,7 +48,6 @@ public final class FabricModJsonV1 extends FabricModJson {
 		return 1;
 	}
 
-	@Override
 	@Nullable
 	public JsonElement getCustom(String key) {
 		return getCustom(jsonObject, key);
@@ -97,6 +96,11 @@ public final class FabricModJsonV1 extends FabricModJson {
 			return Collections.emptyMap();
 		}
 
-		return Map.of(readString(jsonObject, "accessWidener"), ModEnvironment.UNIVERSAL);
+		return Map.of(FabricModJsonUtils.readString(jsonObject, "accessWidener"), ModEnvironment.UNIVERSAL);
+	}
+
+	@Override
+	public JsonElement getInjectedInterfaces() {
+		return getCustom(Constants.CustomModJsonKeys.INJECTED_INTERFACE);
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/util/metadata/ModJsonFactory.java b/src/main/java/net/fabricmc/loom/util/metadata/ModJsonFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..7bbcc7cb14f8cab527f11a45c4ff1ece52e56dd7
--- /dev/null
+++ b/src/main/java/net/fabricmc/loom/util/metadata/ModJsonFactory.java
@@ -0,0 +1,76 @@
+/*
+ * This file is part of fabric-loom, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2022 FabricMC
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+package net.fabricmc.loom.util.metadata;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Path;
+import java.util.Optional;
+
+import org.gradle.api.tasks.SourceSet;
+import org.jetbrains.annotations.Nullable;
+
+import net.fabricmc.loom.api.metadata.ModJson;
+import net.fabricmc.loom.util.fmj.FabricModJsonHelpers;
+import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
+import net.fabricmc.loom.util.gradle.SourceSetHelper;
+import net.fabricmc.loom.util.qmj.QuiltModJsonFactory;
+
+public class ModJsonFactory {
+	public static ModJson createFromZip(Path zipPath) {
+		if (FabricModJsonFactory.isQuiltMod(zipPath)) {
+			return QuiltModJsonFactory.createFromZip(zipPath);
+		} else {
+			return FabricModJsonFactory.createFromZip(zipPath);
+		}
+	}
+
+	public static ModJson createFromZipNullable(Path zipPath) {
+		if (FabricModJsonFactory.isQuiltMod(zipPath)) {
+			return QuiltModJsonFactory.createFromZipNullable(zipPath);
+		} else {
+			return FabricModJsonFactory.createFromZipNullable(zipPath);
+		}
+	}
+
+	public static Optional<? extends ModJson> createFromZipOptional(Path zipPath) {
+		if (FabricModJsonFactory.isQuiltMod(zipPath)) {
+			return QuiltModJsonFactory.createFromZipOptional(zipPath);
+		} else {
+			return FabricModJsonFactory.createFromZipOptional(zipPath);
+		}
+	}
+
+	@Nullable
+	public static ModJson createFromSourceSetsNullable(SourceSet... sourceSets) throws IOException {
+		File file = SourceSetHelper.findFirstFileInResource(FabricModJsonHelpers.QUILT_MOD_JSON, sourceSets);
+
+		if (file != null) {
+			return QuiltModJsonFactory.createFromSourceSetsNullable(sourceSets);
+		} else {
+			return FabricModJsonFactory.createFromSourceSetsNullable(sourceSets);
+		}
+	}
+}
diff --git a/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJson.java b/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJson.java
new file mode 100644
index 0000000000000000000000000000000000000000..8ad58423fcdd638b7b638e1c1d5072ceac2c8253
--- /dev/null
+++ b/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJson.java
@@ -0,0 +1,59 @@
+/*
+ * This file is part of fabric-loom, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2022 FabricMC
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+package net.fabricmc.loom.util.qmj;
+
+import java.util.Objects;
+
+import com.google.gson.JsonObject;
+
+import net.fabricmc.loom.api.metadata.ModJson;
+import net.fabricmc.loom.util.fmj.FabricModJsonSource;
+
+public abstract sealed class QuiltModJson implements ModJson permits QuiltModJsonV1 {
+	protected final JsonObject jsonObject;
+	protected final JsonObject loader;
+	private final FabricModJsonSource source;
+
+	protected QuiltModJson(JsonObject jsonObject, FabricModJsonSource source) {
+		this.jsonObject = Objects.requireNonNull(jsonObject);
+		this.source = Objects.requireNonNull(source);
+		this.loader = jsonObject.getAsJsonObject("quilt_loader");
+	}
+
+	@Override
+	public final FabricModJsonSource getSource() {
+		return source;
+	}
+
+	@Override
+	public final String toString() {
+		return getClass().getName() + "[id=%s]".formatted(getId());
+	}
+
+	@Override
+	public final int hashCode() {
+		return Objects.hash(getId());
+	}
+}
diff --git a/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonFactory.java b/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..9fec8491ac18610cbe91241b1de044d5d370c7a4
--- /dev/null
+++ b/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonFactory.java
@@ -0,0 +1,126 @@
+/*
+ * This file is part of fabric-loom, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2022 FabricMC
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+package net.fabricmc.loom.util.qmj;
+
+import static net.fabricmc.loom.util.fmj.FabricModJsonUtils.readInt;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.Reader;
+import java.io.UncheckedIOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.Optional;
+
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSyntaxException;
+import org.gradle.api.tasks.SourceSet;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.VisibleForTesting;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import net.fabricmc.loom.LoomGradlePlugin;
+import net.fabricmc.loom.util.ZipUtils;
+import net.fabricmc.loom.util.gradle.SourceSetHelper;
+import net.fabricmc.loom.util.fmj.FabricModJsonSource;
+
+public final class QuiltModJsonFactory {
+	private static final String QUILT_MOD_JSON = "quilt.mod.json";
+	private static final Logger LOGGER = LoggerFactory.getLogger(QuiltModJsonFactory.class);
+	private QuiltModJsonFactory() {
+	}
+
+	@VisibleForTesting
+	public static QuiltModJson create(JsonObject jsonObject, FabricModJsonSource source) {
+		int schemaVersion = 0;
+
+		if (jsonObject.has("schema_version")) {
+			// V0 had no schemaVersion key.
+			schemaVersion = readInt(jsonObject, "schema_version");
+		}
+
+		return switch (schemaVersion) {
+		case 1 -> new QuiltModJsonV1(jsonObject, source);
+		default -> throw new UnsupportedOperationException(String.format("This version of quilt-loom doesn't support the newer quilt.mod.json schema version of (%s) Please update quilt-loom to be able to read this.", schemaVersion));
+		};
+	}
+
+	public static QuiltModJson createFromZip(Path zipPath) {
+		try {
+			return create(ZipUtils.unpackGson(zipPath, QUILT_MOD_JSON, JsonObject.class), new FabricModJsonSource.ZipSource(zipPath));
+		} catch (IOException e) {
+			throw new UncheckedIOException("Failed to read fabric.mod.json file in zip: " + zipPath, e);
+		}
+	}
+
+	@Nullable
+	public static QuiltModJson createFromZipNullable(Path zipPath) {
+		JsonObject jsonObject;
+
+		try {
+			jsonObject = ZipUtils.unpackGsonNullable(zipPath, QUILT_MOD_JSON, JsonObject.class);
+		} catch (IOException e) {
+			throw new UncheckedIOException("Failed to read zip: " + zipPath, e);
+		}
+
+		if (jsonObject == null) {
+			return null;
+		}
+
+		return create(jsonObject, new FabricModJsonSource.ZipSource(zipPath));
+	}
+
+	public static Optional<QuiltModJson> createFromZipOptional(Path zipPath) {
+		return Optional.ofNullable(createFromZipNullable(zipPath));
+	}
+
+	public static QuiltModJson createFromDirectory(Path directory) throws IOException {
+		final Path path = directory.resolve(QUILT_MOD_JSON);
+
+		try (Reader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {
+			return create(LoomGradlePlugin.GSON.fromJson(reader, JsonObject.class), new FabricModJsonSource.DirectorySource(directory));
+		}
+	}
+
+	@Nullable
+	public static QuiltModJson createFromSourceSetsNullable(SourceSet... sourceSets) throws IOException {
+		final File file = SourceSetHelper.findFirstFileInResource(QUILT_MOD_JSON, sourceSets);
+
+		if (file == null) {
+			return null;
+		}
+
+		try (Reader reader = Files.newBufferedReader(file.toPath(), StandardCharsets.UTF_8)) {
+			return create(LoomGradlePlugin.GSON.fromJson(reader, JsonObject.class), new FabricModJsonSource.SourceSetSource(sourceSets));
+		} catch (JsonSyntaxException e) {
+			LOGGER.warn("Failed to parse mod json: {}", file.getAbsolutePath());
+			return null;
+		} catch (IOException e) {
+			throw new UncheckedIOException("Failed to read " + file.getAbsolutePath(), e);
+		}
+	}
+}
diff --git a/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonV1.java b/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonV1.java
new file mode 100644
index 0000000000000000000000000000000000000000..9323fbcb00a255c7ce4fb89a5543304330da94af
--- /dev/null
+++ b/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonV1.java
@@ -0,0 +1,171 @@
+/*
+ * This file is part of fabric-loom, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2022 FabricMC
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+package net.fabricmc.loom.util.qmj;
+
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.stream.Collectors;
+import java.util.stream.StreamSupport;
+
+import com.google.gson.JsonArray;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonPrimitive;
+import org.jetbrains.annotations.Nullable;
+
+import net.fabricmc.loom.util.fmj.ModEnvironment;
+import net.fabricmc.loom.util.fmj.FabricModJsonSource;
+import net.fabricmc.loom.util.fmj.FabricModJsonUtils;
+
+public final class QuiltModJsonV1 extends QuiltModJson {
+	QuiltModJsonV1(JsonObject jsonObject, FabricModJsonSource source) {
+		super(jsonObject, source);
+	}
+
+	@Override
+	public String getId() {
+		return FabricModJsonUtils.readString(loader, "id");
+	}
+
+	@Override
+	public String getModVersion() {
+		return FabricModJsonUtils.readString(loader, "version");
+	}
+
+	@Override
+	public String getModName() {
+		if (loader.has("metadata")) {
+			JsonObject metadata = loader.getAsJsonObject("metadata");
+
+			if (metadata.has("name")) {
+				return FabricModJsonUtils.readString(metadata, "name");
+			}
+		}
+
+		return null;
+	}
+
+	public @Nullable JsonElement getCustom(String key) {
+		return jsonObject.get(key);
+	}
+
+	@Override
+	public List<String> getMixinConfigurations() {
+		final JsonElement mixins = jsonObject.get("mixin");
+
+		if (mixins == null) {
+			return Collections.emptyList();
+		} else if (mixins.isJsonArray()) {
+			return StreamSupport.stream(mixins.getAsJsonArray().spliterator(), false)
+					.map(QuiltModJsonV1::readMixinElement)
+					.collect(Collectors.toList());
+		} else if (mixins.isJsonPrimitive() && mixins.getAsJsonPrimitive().isString()) {
+			return Collections.singletonList(mixins.getAsJsonPrimitive().getAsString());
+		} else {
+			throw new RuntimeException("Incorrect QMJ format; expected 'mixin' to be a string or array");
+		}
+	}
+
+	private static String readMixinElement(JsonElement jsonElement) {
+		if (jsonElement instanceof JsonPrimitive str) {
+			return str.getAsString();
+		} else if (jsonElement instanceof JsonObject obj) {
+			return obj.get("config").getAsString();
+		} else {
+			throw new RuntimeException("Expected mixin element to be an object or string");
+		}
+	}
+
+	@Override
+	public Map<String, ModEnvironment> getClassTweakers() {
+		final JsonElement aws = jsonObject.get("access_widener");
+
+		if (aws != null) {
+			if (aws.isJsonArray()) {
+				JsonArray array = aws.getAsJsonArray();
+
+				if (array.size() > 1) {
+					throw new UnsupportedOperationException("Loom does not support more than one access widener per mod. Sorry!");
+				} else if (array.size() == 1) {
+					return Map.of(array.get(0).getAsString(), ModEnvironment.UNIVERSAL);
+				}
+			} else if (aws.isJsonPrimitive() && aws.getAsJsonPrimitive().isString()) {
+				return Map.of(aws.getAsString(), ModEnvironment.UNIVERSAL);
+			}
+		}
+
+		return Collections.emptyMap();
+	}
+
+	@Override
+	public @Nullable JsonElement getInjectedInterfaces() {
+		final JsonElement loom = getCustom("quilt_loom");
+
+		if (loom != null) {
+			return loom.getAsJsonObject().get("injected_interfaces");
+		} else {
+			return null;
+		}
+	}
+
+	@Override
+	public String getProvidedJavadocPath() {
+		final JsonElement loom = getCustom("quilt_loom");
+
+		if (loom != null) {
+			return FabricModJsonUtils.readStringOrNull(loom.getAsJsonObject(), "provided_javadoc");
+		} else {
+			return null;
+		}
+	}
+
+	@Override
+	public JsonObject stripNestedJars(JsonObject json) {
+		JsonObject loader = json.has("quilt_loader") ? json.get("quilt_loader").getAsJsonObject() : new JsonObject();
+		loader.remove("jars");
+		return json;
+	}
+
+	@Override
+	public JsonObject addNestedJars(JsonObject json, List<String> files) {
+		JsonObject loader = json.has("quilt_loader") ? json.get("quilt_loader").getAsJsonObject() : new JsonObject();
+		JsonArray nestedJars = loader.has("jars") ? json.get("jars").getAsJsonArray() : new JsonArray();
+
+		for (String nestedJarPath : files) {
+			for (JsonElement nestedJar : nestedJars) {
+				if (nestedJarPath.equals(nestedJar.getAsString())) {
+					throw new IllegalStateException("Cannot nest 2 jars at the same path: " + nestedJarPath);
+				}
+			}
+
+			nestedJars.add(nestedJarPath);
+		}
+
+		loader.add("jars", nestedJars);
+
+		return json;
+	}
+}
