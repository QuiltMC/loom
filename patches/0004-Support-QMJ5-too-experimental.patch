From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ennui Langeweile <85590273+EnnuiL@users.noreply.github.com>
Date: Wed, 12 Jul 2023 14:56:12 -0300
Subject: [PATCH] Support QMJ5 too (experimental!)

If implemented into Loader, this will be squashed into the previous commit.

diff --git a/build.gradle b/build.gradle
index 32442f2a..e15e9d26 100644
--- a/build.gradle
+++ b/build.gradle
@@ -70,6 +70,11 @@ repositories {
 		name = 'Fabric'
 		url = 'https://maven.fabricmc.net/'
 	}
+	maven {
+		name = "Quilt"
+		url = "https://maven.quiltmc.org/repository/release"
+	}
+	gradlePluginPortal()
 	mavenCentral()
 }
 
@@ -166,6 +171,10 @@ dependencies {
 	// Kapt integration
 	compileOnly libs.kotlin.gradle.plugin
 
+	// Dependencies we import
+	implementation('org.quiltmc.parsers:json:0.2.0')
+	implementation('org.quiltmc.parsers:gson:0.2.0')
+
 	// Testing
 	testImplementation(gradleTestKit())
 	testImplementation(testLibs.spock) {
diff --git a/src/main/java/net/fabricmc/loom/configuration/metadata/ModMetadataHelper.java b/src/main/java/net/fabricmc/loom/configuration/metadata/ModMetadataHelper.java
index 490240ac..449a3963 100644
--- a/src/main/java/net/fabricmc/loom/configuration/metadata/ModMetadataHelper.java
+++ b/src/main/java/net/fabricmc/loom/configuration/metadata/ModMetadataHelper.java
@@ -46,6 +46,7 @@ import net.fabricmc.loom.util.metadata.ModJsonFactory;
 public class ModMetadataHelper {
 	public static final String FABRIC_MOD_JSON = "fabric.mod.json";
 	public static final String QUILT_MOD_JSON = "quilt.mod.json";
+	public static final String QUILT_MOD_JSON5 = "quilt.mod.json5";
 
 	// Returns a list of Mods found in the provided project's main or client sourcesets
 	public static List<ModJson> getModsInProject(Project project) {
@@ -75,18 +76,34 @@ public class ModMetadataHelper {
 	}
 
 	public static boolean isModJar(Path input) {
-		return ZipUtils.contains(input, QUILT_MOD_JSON) || ZipUtils.contains(input, FABRIC_MOD_JSON);
+		return ZipUtils.contains(input, QUILT_MOD_JSON5)
+				|| ZipUtils.contains(input, QUILT_MOD_JSON)
+				|| ZipUtils.contains(input, FABRIC_MOD_JSON);
 	}
 
 	public static boolean containsMod(FileSystemUtil.Delegate fs) {
-		return Files.exists(fs.getPath(QUILT_MOD_JSON)) || Files.exists(fs.getPath(FABRIC_MOD_JSON));
+		return Files.exists(fs.getPath(QUILT_MOD_JSON5))
+				|| Files.exists(fs.getPath(QUILT_MOD_JSON))
+				|| Files.exists(fs.getPath(FABRIC_MOD_JSON));
 	}
 
 	public static boolean isQuiltMod(Path jar) {
 		return ZipUtils.contains(jar, QUILT_MOD_JSON);
 	}
 
+	public static boolean isQuiltModWithQMJ5(Path jar) {
+		return ZipUtils.contains(jar, QUILT_MOD_JSON5);
+	}
+
 	public static String getMetadataPath(Path jar) {
-		return isQuiltMod(jar) ? QUILT_MOD_JSON : FABRIC_MOD_JSON;
+		if (isQuiltModWithQMJ5(jar)) {
+			return QUILT_MOD_JSON5;
+		}
+
+		if (isQuiltMod(jar)) {
+			return QUILT_MOD_JSON;
+		}
+
+		return FABRIC_MOD_JSON;
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java b/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java
index e0f2abf1..e0ba5d74 100644
--- a/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java
+++ b/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java
@@ -28,6 +28,7 @@ import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -40,6 +41,7 @@ import java.util.jar.Manifest;
 import javax.inject.Inject;
 
 import com.google.common.base.Preconditions;
+import com.google.gson.JsonElement;
 import org.gradle.api.Action;
 import org.gradle.api.file.ConfigurableFileCollection;
 import org.gradle.api.file.RegularFileProperty;
@@ -61,8 +63,11 @@ import org.gradle.workers.WorkParameters;
 import org.gradle.workers.WorkQueue;
 import org.gradle.workers.WorkerExecutor;
 import org.jetbrains.annotations.ApiStatus;
+import org.quiltmc.parsers.json.JsonReader;
+import org.quiltmc.parsers.json.gson.GsonReader;
 
 import net.fabricmc.loom.LoomGradleExtension;
+import net.fabricmc.loom.LoomGradlePlugin;
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
 import net.fabricmc.loom.task.service.JarManifestService;
 import net.fabricmc.loom.util.Constants;
@@ -71,6 +76,9 @@ import net.fabricmc.loom.util.ZipUtils;
 import net.fabricmc.loom.util.gradle.SourceSetHelper;
 
 public abstract class AbstractRemapJarTask extends Jar {
+	public static final String QUILT_MOD_JSON5_PATH = "quilt.mod.json5";
+	public static final String QUILT_MOD_JSON_PATH = "quilt.mod.json";
+
 	@InputFile
 	public abstract RegularFileProperty getInputFile();
 
@@ -204,6 +212,18 @@ public abstract class AbstractRemapJarTask extends Jar {
 			outputFile = getParameters().getOutputFile().getAsFile().get().toPath();
 		}
 
+		protected void convertQmj5ToQmj() throws IOException {
+			if (ZipUtils.transform(outputFile, Map.of(QUILT_MOD_JSON5_PATH, bytes -> {
+				var jsonReader = new GsonReader(JsonReader.json5(new String(bytes, StandardCharsets.UTF_8)));
+				var element = LoomGradlePlugin.GSON.fromJson(jsonReader, JsonElement.class);
+				var convertedElement = LoomGradlePlugin.GSON.toJson(element);
+
+				return convertedElement.getBytes();
+			})) > 0) {
+				ZipUtils.move(outputFile, QUILT_MOD_JSON5_PATH, QUILT_MOD_JSON_PATH);
+			}
+		}
+
 		protected void modifyJarManifest() throws IOException {
 			int count = ZipUtils.transform(outputFile, Map.of(Constants.Manifest.PATH, bytes -> {
 				var manifest = new Manifest(new ByteArrayInputStream(bytes));
diff --git a/src/main/java/net/fabricmc/loom/task/RemapJarTask.java b/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
index 2c2a35c4..8173c8a7 100644
--- a/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
+++ b/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
@@ -238,6 +238,7 @@ public abstract class RemapJarTask extends AbstractRemapJarTask {
 					markClientOnlyClasses();
 				}
 
+				convertQmj5ToQmj();
 				remapAccessWidener();
 				addRefmaps();
 				addNestedJars();
diff --git a/src/main/java/net/fabricmc/loom/task/RemapSourcesJarTask.java b/src/main/java/net/fabricmc/loom/task/RemapSourcesJarTask.java
index f0aa6d89..3b6141db 100644
--- a/src/main/java/net/fabricmc/loom/task/RemapSourcesJarTask.java
+++ b/src/main/java/net/fabricmc/loom/task/RemapSourcesJarTask.java
@@ -98,6 +98,7 @@ public abstract class RemapSourcesJarTask extends AbstractRemapJarTask {
 					Files.copy(inputFile, outputFile, StandardCopyOption.REPLACE_EXISTING);
 				}
 
+				convertQmj5ToQmj();
 				modifyJarManifest();
 				rewriteJar();
 			} catch (Exception e) {
diff --git a/src/main/java/net/fabricmc/loom/task/launch/GenerateDLIConfigTask.java b/src/main/java/net/fabricmc/loom/task/launch/GenerateDLIConfigTask.java
index 53a0976d..b206c707 100644
--- a/src/main/java/net/fabricmc/loom/task/launch/GenerateDLIConfigTask.java
+++ b/src/main/java/net/fabricmc/loom/task/launch/GenerateDLIConfigTask.java
@@ -57,6 +57,7 @@ public abstract class GenerateDLIConfigTask extends AbstractLoomTask {
 		final LaunchConfig launchConfig = new LaunchConfig()
 				.property("loader.development", "true")
 				.property("loader.remapClasspathFile", getExtension().getFiles().getRemapClasspathFile().getAbsolutePath())
+				.property("loader.enable_quilt_mod_json5_in_dev_env", "true")
 				.property("log4j.configurationFile", getAllLog4JConfigFiles())
 				.property("log4j2.formatMsgNoLookups", "true")
 
diff --git a/src/main/java/net/fabricmc/loom/util/ZipUtils.java b/src/main/java/net/fabricmc/loom/util/ZipUtils.java
index 9b387ad9..3159594d 100644
--- a/src/main/java/net/fabricmc/loom/util/ZipUtils.java
+++ b/src/main/java/net/fabricmc/loom/util/ZipUtils.java
@@ -47,6 +47,8 @@ import org.jetbrains.annotations.Nullable;
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassVisitor;
 import org.objectweb.asm.ClassWriter;
+import org.quiltmc.parsers.json.JsonReader;
+import org.quiltmc.parsers.json.gson.GsonReader;
 
 import net.fabricmc.loom.LoomGradlePlugin;
 
@@ -112,6 +114,12 @@ public class ZipUtils {
 		return LoomGradlePlugin.GSON.fromJson(new String(bytes, StandardCharsets.UTF_8), clazz);
 	}
 
+	public static <T> T unpackGsonWithJson5(Path zip, String path, Class<T> clazz) throws IOException {
+		final byte[] bytes = unpack(zip, path);
+		final var reader = new GsonReader(JsonReader.json5(new String(bytes, StandardCharsets.UTF_8)));
+		return LoomGradlePlugin.GSON.fromJson(reader, clazz);
+	}
+
 	@Nullable
 	public static <T> T unpackGsonNullable(Path zip, String path, Class<T> clazz) throws IOException {
 		try {
@@ -121,6 +129,15 @@ public class ZipUtils {
 		}
 	}
 
+	@Nullable
+	public static <T> T unpackGsonWithJson5Nullable(Path zip, String path, Class<T> clazz) throws IOException {
+		try {
+			return unpackGsonWithJson5(zip, path, clazz);
+		} catch (NoSuchFileException e) {
+			return null;
+		}
+	}
+
 	public static <T> T unpackJackson(Path zip, String path, Class<T> clazz) throws IOException {
 		final byte[] bytes = unpack(zip, path);
 		return LoomGradlePlugin.GSON.fromJson(new String(bytes, StandardCharsets.UTF_8), clazz);
@@ -184,6 +201,20 @@ public class ZipUtils {
 		}
 	}
 
+	public static void move(Path zip, String path, String newPath) throws IOException {
+		try (FileSystemUtil.Delegate fs = FileSystemUtil.getJarFileSystem(zip, true)) {
+			Path fsPath = fs.get().getPath(path);
+			Path newFsPath = fs.get().getPath(newPath);
+
+			if (Files.exists(fsPath)) {
+				Files.write(newFsPath, Files.readAllBytes(fsPath), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
+				Files.delete(fsPath);
+			} else {
+				throw new NoSuchFileException(fsPath.toString());
+			}
+		}
+	}
+
 	public static int transformString(Path zip, Collection<Pair<String, UnsafeUnaryOperator<String>>> transforms) throws IOException {
 		return transformString(zip, transforms.stream());
 	}
diff --git a/src/main/java/net/fabricmc/loom/util/metadata/ModJsonFactory.java b/src/main/java/net/fabricmc/loom/util/metadata/ModJsonFactory.java
index 1af5a154..4b26643a 100644
--- a/src/main/java/net/fabricmc/loom/util/metadata/ModJsonFactory.java
+++ b/src/main/java/net/fabricmc/loom/util/metadata/ModJsonFactory.java
@@ -39,25 +39,34 @@ import net.fabricmc.loom.util.gradle.SourceSetHelper;
 import net.fabricmc.loom.util.qmj.QuiltModJsonFactory;
 
 public class ModJsonFactory {
+	public static final String QUILT_MOD_JSON = "quilt.mod.json";
+	public static final String QUILT_MOD_JSON5 = "quilt.mod.json5";
+
 	public static ModJson createFromZip(Path zipPath) {
-		if (ModMetadataHelper.isQuiltMod(zipPath)) {
-			return QuiltModJsonFactory.createFromZip(zipPath);
+		if (ModMetadataHelper.isQuiltModWithQMJ5(zipPath)) {
+			return QuiltModJsonFactory.createFromZip(zipPath, QUILT_MOD_JSON5);
+		} else if (ModMetadataHelper.isQuiltMod(zipPath)) {
+			return QuiltModJsonFactory.createFromZip(zipPath, QUILT_MOD_JSON);
 		} else {
 			return FabricModJsonFactory.createFromZip(zipPath);
 		}
 	}
 
 	public static ModJson createFromZipNullable(Path zipPath) {
-		if (ModMetadataHelper.isQuiltMod(zipPath)) {
-			return QuiltModJsonFactory.createFromZipNullable(zipPath);
+		if (ModMetadataHelper.isQuiltModWithQMJ5(zipPath)) {
+			return QuiltModJsonFactory.createFromZipNullable(zipPath, QUILT_MOD_JSON5);
+		} else if (ModMetadataHelper.isQuiltMod(zipPath)) {
+			return QuiltModJsonFactory.createFromZipNullable(zipPath, QUILT_MOD_JSON);
 		} else {
 			return FabricModJsonFactory.createFromZipNullable(zipPath);
 		}
 	}
 
 	public static Optional<? extends ModJson> createFromZipOptional(Path zipPath) {
-		if (ModMetadataHelper.isQuiltMod(zipPath)) {
-			return QuiltModJsonFactory.createFromZipOptional(zipPath);
+		if (ModMetadataHelper.isQuiltModWithQMJ5(zipPath)) {
+			return QuiltModJsonFactory.createFromZipOptional(zipPath, QUILT_MOD_JSON5);
+		} else if (ModMetadataHelper.isQuiltMod(zipPath)) {
+			return QuiltModJsonFactory.createFromZipOptional(zipPath, QUILT_MOD_JSON);
 		} else {
 			return FabricModJsonFactory.createFromZipOptional(zipPath);
 		}
@@ -65,10 +74,16 @@ public class ModJsonFactory {
 
 	@Nullable
 	public static ModJson createFromSourceSetsNullable(SourceSet... sourceSets) throws IOException {
-		File file = SourceSetHelper.findFirstFileInResource(ModMetadataHelper.QUILT_MOD_JSON, sourceSets);
+		File file = SourceSetHelper.findFirstFileInResource(ModMetadataHelper.QUILT_MOD_JSON5, sourceSets);
+		String qmj = QUILT_MOD_JSON5;
+
+		if (file == null) {
+			file = SourceSetHelper.findFirstFileInResource(ModMetadataHelper.QUILT_MOD_JSON, sourceSets);
+			qmj = QUILT_MOD_JSON;
+		}
 
 		if (file != null) {
-			return QuiltModJsonFactory.createFromSourceSetsNullable(sourceSets);
+			return QuiltModJsonFactory.createFromSourceSetsNullable(qmj, sourceSets);
 		} else {
 			return FabricModJsonFactory.createFromSourceSetsNullable(sourceSets);
 		}
diff --git a/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonFactory.java b/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonFactory.java
index e179a455..b9ed2d67 100644
--- a/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonFactory.java
+++ b/src/main/java/net/fabricmc/loom/util/qmj/QuiltModJsonFactory.java
@@ -39,6 +39,8 @@ import com.google.gson.JsonObject;
 import org.gradle.api.tasks.SourceSet;
 import org.jetbrains.annotations.Nullable;
 import org.jetbrains.annotations.VisibleForTesting;
+import org.quiltmc.parsers.json.JsonReader;
+import org.quiltmc.parsers.json.gson.GsonReader;
 
 import net.fabricmc.loom.LoomGradlePlugin;
 import net.fabricmc.loom.util.ZipUtils;
@@ -47,6 +49,7 @@ import net.fabricmc.loom.util.metadata.ModJsonSource;
 
 public final class QuiltModJsonFactory {
 	private static final String QUILT_MOD_JSON = "quilt.mod.json";
+	private static final String QUILT_MOD_JSON5 = "quilt.mod.json5";
 
 	private QuiltModJsonFactory() {
 	}
@@ -66,20 +69,28 @@ public final class QuiltModJsonFactory {
 		};
 	}
 
-	public static QuiltModJson createFromZip(Path zipPath) {
+	public static QuiltModJson createFromZip(Path zipPath, String qmj) {
 		try {
-			return create(ZipUtils.unpackGson(zipPath, QUILT_MOD_JSON, JsonObject.class), new ModJsonSource.ZipSource(zipPath));
+			if (qmj.equals(QUILT_MOD_JSON5)) {
+				return create(ZipUtils.unpackGsonWithJson5(zipPath, qmj, JsonObject.class), new ModJsonSource.ZipSource(zipPath));
+			} else {
+				return create(ZipUtils.unpackGson(zipPath, qmj, JsonObject.class), new ModJsonSource.ZipSource(zipPath));
+			}
 		} catch (IOException e) {
 			throw new UncheckedIOException("Failed to read fabric.mod.json file in zip: " + zipPath, e);
 		}
 	}
 
 	@Nullable
-	public static QuiltModJson createFromZipNullable(Path zipPath) {
+	public static QuiltModJson createFromZipNullable(Path zipPath, String qmj) {
 		JsonObject jsonObject;
 
 		try {
-			jsonObject = ZipUtils.unpackGsonNullable(zipPath, QUILT_MOD_JSON, JsonObject.class);
+			if (qmj.equals(QUILT_MOD_JSON5)) {
+				jsonObject = ZipUtils.unpackGsonWithJson5Nullable(zipPath, qmj, JsonObject.class);
+			} else {
+				jsonObject = ZipUtils.unpackGsonNullable(zipPath, qmj, JsonObject.class);
+			}
 		} catch (IOException e) {
 			throw new UncheckedIOException("Failed to read zip: " + zipPath, e);
 		}
@@ -91,28 +102,45 @@ public final class QuiltModJsonFactory {
 		return create(jsonObject, new ModJsonSource.ZipSource(zipPath));
 	}
 
-	public static Optional<QuiltModJson> createFromZipOptional(Path zipPath) {
-		return Optional.ofNullable(createFromZipNullable(zipPath));
+	public static Optional<QuiltModJson> createFromZipOptional(Path zipPath, String qmj) {
+		return Optional.ofNullable(createFromZipNullable(zipPath, qmj));
 	}
 
-	public static QuiltModJson createFromDirectory(Path directory) throws IOException {
-		final Path path = directory.resolve(QUILT_MOD_JSON);
+	public static QuiltModJson createFromDirectory(Path directory, String qmj) throws IOException {
+		final Path path = directory.resolve(qmj);
 
 		try (Reader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {
-			return create(LoomGradlePlugin.GSON.fromJson(reader, JsonObject.class), new ModJsonSource.DirectorySource(directory));
+			com.google.gson.stream.JsonReader jsonReader;
+
+			if (qmj.equals(QUILT_MOD_JSON5)) {
+				jsonReader = new GsonReader(JsonReader.json5(reader));
+			} else {
+				jsonReader = LoomGradlePlugin.GSON.newJsonReader(reader);
+
+			}
+
+			return create(LoomGradlePlugin.GSON.fromJson(jsonReader, JsonObject.class), new ModJsonSource.DirectorySource(directory));
 		}
 	}
 
 	@Nullable
-	public static QuiltModJson createFromSourceSetsNullable(SourceSet... sourceSets) throws IOException {
-		final File file = SourceSetHelper.findFirstFileInResource(QUILT_MOD_JSON, sourceSets);
+	public static QuiltModJson createFromSourceSetsNullable(String qmj, SourceSet... sourceSets) throws IOException {
+		final File file = SourceSetHelper.findFirstFileInResource(qmj, sourceSets);
 
 		if (file == null) {
 			return null;
 		}
 
 		try (Reader reader = Files.newBufferedReader(file.toPath(), StandardCharsets.UTF_8)) {
-			return create(LoomGradlePlugin.GSON.fromJson(reader, JsonObject.class), new ModJsonSource.SourceSetSource(sourceSets));
+			com.google.gson.stream.JsonReader jsonReader;
+
+			if (qmj.equals(QUILT_MOD_JSON5)) {
+				jsonReader = new GsonReader(JsonReader.json5(reader));
+			} else {
+				jsonReader = LoomGradlePlugin.GSON.newJsonReader(reader);
+			}
+
+			return create(LoomGradlePlugin.GSON.fromJson(jsonReader, JsonObject.class), new ModJsonSource.SourceSetSource(sourceSets));
 		}
 	}
 }
