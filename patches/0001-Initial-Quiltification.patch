From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: glitch <glitch.g3431@gmail.com>
Date: Tue, 11 Jul 2023 17:40:07 -0500
Subject: [PATCH] Initial Quiltification

This includes:
- Changing the plugin marker (except in tests)
- Using a different set of caches
- Using the Quilt Loader system properties
- Using `quilt_installer.json`
- Renaming the shared service manager
- Automatically applying the Quilt Maven
- Adding Vineflower and using it by default

diff --git a/build.gradle b/build.gradle
index de84c29f..32442f2a 100644
--- a/build.gradle
+++ b/build.gradle
@@ -49,7 +49,7 @@ tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
 	}
 }
 
-group = 'net.fabricmc'
+group = 'org.quiltmc'
 def baseVersion = '1.5'
 
 def ENV = System.getenv()
@@ -252,10 +252,16 @@ codenarc {
 
 gradlePlugin {
 	plugins {
-		fabricLoom {
-			id = 'fabric-loom'
+		quiltLoom {
+			id = 'org.quiltmc.loom'
 			implementationClass = 'net.fabricmc.loom.bootstrap.LoomGradlePluginBootstrap'
 		}
+		if (!ENV.MAVEN_URL) {
+			fabricLoom {
+				id = 'fabric-loom'
+				implementationClass = 'net.fabricmc.loom.bootstrap.LoomGradlePluginBootstrap'
+			}
+		}
 	}
 }
 
@@ -312,8 +318,8 @@ publishing {
 
 		// Manually crate the plugin marker for snapshot versions
 		snapshotPlugin(MavenPublication) { publication ->
-			groupId 'fabric-loom'
-			artifactId 'fabric-loom.gradle.plugin'
+			groupId 'org.quiltmc.loom'
+			artifactId 'org.quiltmc.loom.gradle.plugin'
 			version baseVersion + '-SNAPSHOT'
 
 			pom.withXml({
@@ -323,9 +329,9 @@ publishing {
 				Node dependencies = root.appendChild(document.createElement('dependencies'))
 				Node dependency = dependencies.appendChild(document.createElement('dependency'))
 				Node groupId = dependency.appendChild(document.createElement('groupId'))
-				groupId.setTextContent('net.fabricmc')
+				groupId.setTextContent('org.quiltmc')
 				Node artifactId = dependency.appendChild(document.createElement('artifactId'))
-				artifactId.setTextContent('fabric-loom')
+				artifactId.setTextContent('loom')
 				Node version = dependency.appendChild(document.createElement('version'))
 				version.setTextContent(baseVersion + '-SNAPSHOT')
 			})
@@ -333,6 +339,7 @@ publishing {
 	}
 	repositories {
 		maven {
+			name = 'release'
 			if (ENV.MAVEN_URL) {
 				url ENV.MAVEN_URL
 				credentials {
@@ -341,6 +348,26 @@ publishing {
 				}
 			}
 		}
+		maven {
+			name = "snapshot"
+			if (ENV.SNAPSHOTS_URL) {
+				url ENV.SNAPSHOTS_URL
+				credentials {
+					username ENV.SNAPSHOTS_USERNAME
+					password ENV.SNAPSHOTS_PASSWORD
+				}
+			}
+		}
+	}
+}
+
+tasks.withType(PublishToMavenRepository) {
+	onlyIf {
+		(repository == publishing.repositories.release && publication == publishing.publications.pluginMaven) ||
+				(repository == publishing.repositories.snapshot
+				&& (publication == publishing.publications.snapshot
+				|| publication == publishing.publications.snapshotPlugin)) ||
+				(repository == publishing.repositories.release && publication.name == "quiltLoomPluginMarkerMaven")
 	}
 }
 
@@ -431,4 +458,4 @@ class PrintActionsTestName extends DefaultTask {
 	}
 }
 
-apply from: rootProject.file('gradle/versions.gradle')
\ No newline at end of file
+apply from: rootProject.file('gradle/versions.gradle')
diff --git a/gradle.properties b/gradle.properties
index 31014b15..ee1d4c30 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
-name = fabric-loom
-description = The Gradle plugin for Fabric
-url = https://github.com/FabricMC/fabric-loom
+name = loom
+description = The Gradle plugin for Quilt
+url = https://github.com/QuiltMC/quilt-loom
 
 kotlin.stdlib.default.dependency = false
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loom/LoomGradlePlugin.java b/src/main/java/net/fabricmc/loom/LoomGradlePlugin.java
index 71248d2d..76a88fc5 100644
--- a/src/main/java/net/fabricmc/loom/LoomGradlePlugin.java
+++ b/src/main/java/net/fabricmc/loom/LoomGradlePlugin.java
@@ -76,7 +76,7 @@ public class LoomGradlePlugin implements BootstrappedPlugin {
 	}
 
 	public void apply(Project project) {
-		project.getLogger().lifecycle("Fabric Loom: " + LOOM_VERSION);
+		project.getLogger().lifecycle("Quilt Loom: " + LOOM_VERSION);
 		LibraryLocationLogger.logLibraryVersions();
 
 		// Apply default plugins
diff --git a/src/main/java/net/fabricmc/loom/LoomRepositoryPlugin.java b/src/main/java/net/fabricmc/loom/LoomRepositoryPlugin.java
index 29b4a526..dc4895d2 100644
--- a/src/main/java/net/fabricmc/loom/LoomRepositoryPlugin.java
+++ b/src/main/java/net/fabricmc/loom/LoomRepositoryPlugin.java
@@ -67,7 +67,10 @@ public class LoomRepositoryPlugin implements Plugin<PluginAware> {
 			repo.setName("Fabric");
 			repo.setUrl(MirrorUtil.getFabricRepository(target));
 		});
-
+		repositories.maven(repo -> {
+			repo.setName("Quilt Releases");
+			repo.setUrl(MirrorUtil.getQuiltRepository(target));
+		});
 		MavenArtifactRepository mojangRepo = repositories.maven(repo -> {
 			repo.setName("Mojang");
 			repo.setUrl(MirrorUtil.getLibrariesBase(target));
diff --git a/src/main/java/net/fabricmc/loom/configuration/LoomDependencyManager.java b/src/main/java/net/fabricmc/loom/configuration/LoomDependencyManager.java
index b41b39bf..d9599c24 100644
--- a/src/main/java/net/fabricmc/loom/configuration/LoomDependencyManager.java
+++ b/src/main/java/net/fabricmc/loom/configuration/LoomDependencyManager.java
@@ -44,7 +44,7 @@ public class LoomDependencyManager {
 		sourceRemapper.remapAll();
 
 		if (extension.getInstallerData() == null) {
-			project.getLogger().warn("fabric-installer.json not found in dependencies!");
+			project.getLogger().warn("installer json not found in dependencies!");
 		}
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/configuration/decompile/SingleJarDecompileConfiguration.java b/src/main/java/net/fabricmc/loom/configuration/decompile/SingleJarDecompileConfiguration.java
index 6965a0bf..8d2f1807 100644
--- a/src/main/java/net/fabricmc/loom/configuration/decompile/SingleJarDecompileConfiguration.java
+++ b/src/main/java/net/fabricmc/loom/configuration/decompile/SingleJarDecompileConfiguration.java
@@ -75,7 +75,7 @@ public class SingleJarDecompileConfiguration extends DecompileConfiguration<Mapp
 			task.setDescription("Decompile minecraft using the default decompiler.");
 			task.setGroup(Constants.TaskGroup.FABRIC);
 
-			task.dependsOn(project.getTasks().named("genSourcesWithCfr"));
+			task.dependsOn(project.getTasks().named("genSourcesWithVineflower"));
 		});
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/configuration/decompile/SplitDecompileConfiguration.java b/src/main/java/net/fabricmc/loom/configuration/decompile/SplitDecompileConfiguration.java
index 0c8df985..8e6e56fe 100644
--- a/src/main/java/net/fabricmc/loom/configuration/decompile/SplitDecompileConfiguration.java
+++ b/src/main/java/net/fabricmc/loom/configuration/decompile/SplitDecompileConfiguration.java
@@ -114,7 +114,7 @@ public final class SplitDecompileConfiguration extends DecompileConfiguration<Ma
 			task.setDescription("Decompile minecraft (%s) using the default decompiler.".formatted(name));
 			task.setGroup(Constants.TaskGroup.FABRIC);
 
-			task.dependsOn(project.getTasks().named("gen%sSourcesWithCfr".formatted(name)));
+			task.dependsOn(project.getTasks().named("gen%sSourcesWithVineflower".formatted(name)));
 		});
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java b/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java
index 057cde42..c7e91aca 100644
--- a/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java
+++ b/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java
@@ -44,7 +44,7 @@ import net.fabricmc.loom.util.FileSystemUtil;
 import net.fabricmc.loom.util.fmj.FabricModJsonFactory;
 
 public record ArtifactMetadata(boolean isFabricMod, RemapRequirements remapRequirements, @Nullable InstallerData installerData, MixinRemapType mixinRemapType) {
-	private static final String INSTALLER_PATH = "fabric-installer.json";
+	private static final String INSTALLER_PATH = "quilt_installer.json";
 
 	public static ArtifactMetadata create(ArtifactRef artifact, String currentLoomVersion) throws IOException {
 		boolean isFabricMod;
diff --git a/src/main/java/net/fabricmc/loom/extension/LoomFilesBaseImpl.java b/src/main/java/net/fabricmc/loom/extension/LoomFilesBaseImpl.java
index d7f0c469..12f19648 100644
--- a/src/main/java/net/fabricmc/loom/extension/LoomFilesBaseImpl.java
+++ b/src/main/java/net/fabricmc/loom/extension/LoomFilesBaseImpl.java
@@ -50,22 +50,22 @@ public abstract class LoomFilesBaseImpl implements LoomFiles {
 
 	@Override
 	public File getUserCache() {
-		return createFile(getGradleUserHomeDir(), "caches" + File.separator + "fabric-loom");
+		return createFile(getGradleUserHomeDir(), "caches" + File.separator + "quilt-loom");
 	}
 
 	@Override
 	public File getRootProjectPersistentCache() {
-		return createFile(getRootDir(), ".gradle" + File.separator + "loom-cache");
+		return createFile(getRootDir(), ".gradle" + File.separator + "quilt-loom-cache");
 	}
 
 	@Override
 	public File getProjectPersistentCache() {
-		return createFile(getProjectDir(), ".gradle" + File.separator + "loom-cache");
+		return createFile(getProjectDir(), ".gradle" + File.separator + "quilt-loom-cache");
 	}
 
 	@Override
 	public File getProjectBuildCache() {
-		return createFile(getBuildDir(), "loom-cache");
+		return createFile(getBuildDir(), "quilt-loom-cache");
 	}
 
 	@Override
diff --git a/src/main/java/net/fabricmc/loom/task/launch/GenerateDLIConfigTask.java b/src/main/java/net/fabricmc/loom/task/launch/GenerateDLIConfigTask.java
index c4774609..53a0976d 100644
--- a/src/main/java/net/fabricmc/loom/task/launch/GenerateDLIConfigTask.java
+++ b/src/main/java/net/fabricmc/loom/task/launch/GenerateDLIConfigTask.java
@@ -55,15 +55,17 @@ public abstract class GenerateDLIConfigTask extends AbstractLoomTask {
 		}
 
 		final LaunchConfig launchConfig = new LaunchConfig()
-				.property("fabric.development", "true")
-				.property("fabric.remapClasspathFile", getExtension().getFiles().getRemapClasspathFile().getAbsolutePath())
+				.property("loader.development", "true")
+				.property("loader.remapClasspathFile", getExtension().getFiles().getRemapClasspathFile().getAbsolutePath())
 				.property("log4j.configurationFile", getAllLog4JConfigFiles())
 				.property("log4j2.formatMsgNoLookups", "true")
 
 				.argument("client", "--assetIndex")
 				.argument("client", getExtension().getMinecraftProvider().getVersionInfo().assetIndex().fabricId(getExtension().getMinecraftProvider().minecraftVersion()))
 				.argument("client", "--assetsDir")
-				.argument("client", assetsDirectory.getAbsolutePath());
+				.argument("client", assetsDirectory.getAbsolutePath())
+				.argument("client", "--version")
+				.argument("client", "Quilt Loom");
 
 		if (versionInfo.hasNativesToExtract()) {
 			String nativesPath = getExtension().getFiles().getNativesDirectory(getProject()).getAbsolutePath();
@@ -74,12 +76,12 @@ public abstract class GenerateDLIConfigTask extends AbstractLoomTask {
 		}
 
 		if (getExtension().areEnvironmentSourceSetsSplit()) {
-			launchConfig.property("client", "fabric.gameJarPath.client", getGameJarPath("client"));
-			launchConfig.property("fabric.gameJarPath", getGameJarPath("common"));
+			launchConfig.property("client", "loader.gameJarPath.client", getGameJarPath("client"));
+			launchConfig.property("loader.gameJarPath", getGameJarPath("common"));
 		}
 
 		if (!getExtension().getMods().isEmpty()) {
-			launchConfig.property("fabric.classPathGroups", getClassPathGroups());
+			launchConfig.property("loader.classPathGroups", getClassPathGroups());
 		}
 
 		final boolean plainConsole = getProject().getGradle().getStartParameter().getConsoleOutput() == ConsoleOutput.Plain;
@@ -133,6 +135,10 @@ public abstract class GenerateDLIConfigTask extends AbstractLoomTask {
 		}
 
 		public LaunchConfig property(String side, String key, String value) {
+			if (key.startsWith("loader.")) {
+				// add the fabric loader property too for compat
+				property(side, "fabric." + key.substring("loader.".length()), value);
+			}
 			values.computeIfAbsent(side + "Properties", (s -> new ArrayList<>()))
 					.add(String.format("%s=%s", key, value));
 			return this;
diff --git a/src/main/java/net/fabricmc/loom/task/service/SourceRemapperService.java b/src/main/java/net/fabricmc/loom/task/service/SourceRemapperService.java
index b3f5456c..18341c50 100644
--- a/src/main/java/net/fabricmc/loom/task/service/SourceRemapperService.java
+++ b/src/main/java/net/fabricmc/loom/task/service/SourceRemapperService.java
@@ -88,7 +88,7 @@ public final class SourceRemapperService implements SharedService {
 		// Create a temp directory with all of the sources
 		if (!Files.isDirectory(source)) {
 			isSrcTmp = true;
-			srcPath = Files.createTempDirectory("fabric-loom-src");
+			srcPath = Files.createTempDirectory("quilt-loom-src");
 			ZipUtils.unpackAll(source, srcPath);
 		}
 
diff --git a/src/main/java/net/fabricmc/loom/util/Constants.java b/src/main/java/net/fabricmc/loom/util/Constants.java
index 10083571..e4de3dd6 100644
--- a/src/main/java/net/fabricmc/loom/util/Constants.java
+++ b/src/main/java/net/fabricmc/loom/util/Constants.java
@@ -32,6 +32,7 @@ public class Constants {
 	public static final String VERSION_MANIFESTS = "https://piston-meta.mojang.com/mc/game/version_manifest_v2.json";
 	public static final String EXPERIMENTAL_VERSIONS = "https://maven.fabricmc.net/net/minecraft/experimental_versions.json";
 	public static final String FABRIC_REPOSITORY = "https://maven.fabricmc.net/";
+	public static final String QUILT_REPOSITORY = "https://maven.quiltmc.org/repository/release/";
 
 	public static final int ASM_VERSION = Opcodes.ASM9;
 
diff --git a/src/main/java/net/fabricmc/loom/util/MirrorUtil.java b/src/main/java/net/fabricmc/loom/util/MirrorUtil.java
index 3350a985..eef1cd42 100644
--- a/src/main/java/net/fabricmc/loom/util/MirrorUtil.java
+++ b/src/main/java/net/fabricmc/loom/util/MirrorUtil.java
@@ -66,4 +66,12 @@ public class MirrorUtil {
 
 		return Constants.FABRIC_REPOSITORY;
 	}
+
+	public static String getQuiltRepository(ExtensionAware aware) {
+		if (aware.getExtensions().getExtraProperties().has("loom_quilt_repository")) {
+			return String.valueOf(aware.getExtensions().getExtraProperties().get("loom_quilt_repository"));
+		}
+
+		return Constants.QUILT_REPOSITORY;
+	}
 }
diff --git a/src/main/java/net/fabricmc/loom/util/SourceRemapper.java b/src/main/java/net/fabricmc/loom/util/SourceRemapper.java
index f008293d..7d4b0ab9 100644
--- a/src/main/java/net/fabricmc/loom/util/SourceRemapper.java
+++ b/src/main/java/net/fabricmc/loom/util/SourceRemapper.java
@@ -128,7 +128,7 @@ public class SourceRemapper {
 		if (!source.isDirectory()) {
 			// create tmp directory
 			isSrcTmp = true;
-			srcPath = Files.createTempDirectory("fabric-loom-src");
+			srcPath = Files.createTempDirectory("quilt-loom-src");
 			ZipUtils.unpackAll(source.toPath(), srcPath);
 		}
 
diff --git a/src/main/java/net/fabricmc/loom/util/gradle/GradleUtils.java b/src/main/java/net/fabricmc/loom/util/gradle/GradleUtils.java
index dbe91442..4988ca56 100644
--- a/src/main/java/net/fabricmc/loom/util/gradle/GradleUtils.java
+++ b/src/main/java/net/fabricmc/loom/util/gradle/GradleUtils.java
@@ -55,7 +55,7 @@ public final class GradleUtils {
 	}
 
 	public static boolean isLoomProject(Project project) {
-		return project.getPluginManager().hasPlugin("fabric-loom");
+		return project.getPluginManager().hasPlugin("org.quiltmc.loom");
 	}
 
 	public static Provider<Boolean> getBooleanPropertyProvider(Project project, String key) {
diff --git a/src/main/java/net/fabricmc/loom/util/service/BuildSharedServiceManager.java b/src/main/java/net/fabricmc/loom/util/service/BuildSharedServiceManager.java
index 6575611d..b6f0ed54 100644
--- a/src/main/java/net/fabricmc/loom/util/service/BuildSharedServiceManager.java
+++ b/src/main/java/net/fabricmc/loom/util/service/BuildSharedServiceManager.java
@@ -39,7 +39,7 @@ import org.slf4j.LoggerFactory;
 
 public abstract class BuildSharedServiceManager implements BuildService<BuildServiceParameters.None> {
 	private static final Logger LOGGER = LoggerFactory.getLogger(BuildSharedServiceManager.class);
-	private static final String NAME = "loom:sharedServiceManager";
+	private static final String NAME = "quilt-loom:sharedServiceManager";
 
 	private SharedServiceManager sharedServiceManager = new BuildSharedServiceManagerImpl();
 	private final AtomicInteger refCount = new AtomicInteger(0);
diff --git a/src/test/groovy/net/fabricmc/loom/test/integration/DecompileTest.groovy b/src/test/groovy/net/fabricmc/loom/test/integration/DecompileTest.groovy
index 7431aae0..c755bb6b 100644
--- a/src/test/groovy/net/fabricmc/loom/test/integration/DecompileTest.groovy
+++ b/src/test/groovy/net/fabricmc/loom/test/integration/DecompileTest.groovy
@@ -46,6 +46,7 @@ class DecompileTest extends Specification implements GradleProjectTestTrait {
 
 		where:
 		decompiler 		| task								| version
+		'vineflower'	| "genSourcesWithVineflower"		| PRE_RELEASE_GRADLE
 		'fernflower'	| "genSourcesWithFernFlower"		| PRE_RELEASE_GRADLE
 		'cfr' 			| "genSourcesWithCfr"				| PRE_RELEASE_GRADLE
 		'vineflower' 	| "genSourcesWithVineflower"		| PRE_RELEASE_GRADLE
diff --git a/src/test/groovy/net/fabricmc/loom/test/util/GradleProjectTestTrait.groovy b/src/test/groovy/net/fabricmc/loom/test/util/GradleProjectTestTrait.groovy
index 11e2a707..0ee3043e 100644
--- a/src/test/groovy/net/fabricmc/loom/test/util/GradleProjectTestTrait.groovy
+++ b/src/test/groovy/net/fabricmc/loom/test/util/GradleProjectTestTrait.groovy
@@ -238,7 +238,7 @@ trait GradleProjectTestTrait {
 		}
 
 		File getGeneratedSources(String mappings, String jarType = "merged") {
-			return new File(getGradleHomeDir(), "caches/fabric-loom/minecraftMaven/net/minecraft/minecraft-${jarType}/${mappings}/minecraft-${jarType}-${mappings}-sources.jar")
+			return new File(getGradleHomeDir(), "caches/quilt-loom/minecraftMaven/net/minecraft/minecraft-${jarType}/${mappings}/minecraft-${jarType}-${mappings}-sources.jar")
 		}
 
 		File getGeneratedLocalSources(String mappings) {
