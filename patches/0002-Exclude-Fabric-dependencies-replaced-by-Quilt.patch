From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Glitch <glitch.g3431@gmail.com>
Date: Thu, 9 Jun 2022 23:40:54 -0500
Subject: [PATCH] Exclude Fabric dependencies replaced by Quilt


diff --git a/src/main/java/net/fabricmc/loom/configuration/InstallerData.java b/src/main/java/net/fabricmc/loom/configuration/InstallerData.java
index ce8da78d03c3bbcc19a9620c9d5d30fc8a058e7d..0d77a02472d055fab95613dbbd4e6dbaa08ea4f9 100644
--- a/src/main/java/net/fabricmc/loom/configuration/InstallerData.java
+++ b/src/main/java/net/fabricmc/loom/configuration/InstallerData.java
@@ -40,9 +40,8 @@ import net.fabricmc.loom.LoomRepositoryPlugin;
 import net.fabricmc.loom.configuration.ide.idea.IdeaUtils;
 import net.fabricmc.loom.util.Constants;
 
-public record InstallerData(String version, JsonObject installerJson) {
+public record InstallerData(String version, JsonObject installerJson, boolean isQuilt) {
 	private static final Logger LOGGER = LoggerFactory.getLogger(InstallerData.class);
-
 	public void applyToProject(Project project) {
 		LoomGradleExtension extension = LoomGradleExtension.get(project);
 
diff --git a/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java b/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java
index 4de303cbc1a85494b07120b68ec6ad3392b79b84..bf10eb071b244720521860e85af02380a94d82c4 100644
--- a/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java
+++ b/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java
@@ -32,12 +32,20 @@ import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Supplier;
 
 import com.google.common.collect.ImmutableMap;
+
+import net.fabricmc.loom.configuration.InstallerData;
+
+import net.fabricmc.loom.configuration.mods.dependency.ModDependencyFactory;
+
 import org.gradle.api.Project;
 import org.gradle.api.artifacts.Configuration;
 import org.gradle.api.artifacts.FileCollectionDependency;
@@ -61,7 +69,6 @@ import net.fabricmc.loom.LoomGradlePlugin;
 import net.fabricmc.loom.api.RemapConfigurationSettings;
 import net.fabricmc.loom.configuration.RemapConfigurations;
 import net.fabricmc.loom.configuration.mods.dependency.ModDependency;
-import net.fabricmc.loom.configuration.mods.dependency.ModDependencyFactory;
 import net.fabricmc.loom.configuration.providers.minecraft.MinecraftSourceSets;
 import net.fabricmc.loom.util.Checksum;
 import net.fabricmc.loom.util.Constants;
@@ -133,20 +140,23 @@ public class ModConfigurationRemapper {
 		}
 
 		// Round 1: Discovery
-		// Go through all the configs to find artifacts to remap and
-		// the installer data. The installer data has to be added before
+		// Go through all the configs and find the installer data and QSL.
+		// The installer data has to be added before
 		// any mods are remapped since remapping needs the dependencies provided by that data.
+		// The presence of Quilt Loader/QSL will be used to exclude the Fabric equivalents if needed.
+
 		final Map<Configuration, List<ModDependency>> dependenciesBySourceConfig = new HashMap<>();
 		final Map<ArtifactRef, ArtifactMetadata> metaCache = new HashMap<>();
+		final Map<Configuration, List<ArtifactRef>> artifactsBySourceConfig = new HashMap<>();
+		final Set<Configuration> sourceConfigsWithQsl = new HashSet<>();
+		// todo clean this up
+		AtomicReference<ArtifactMetadata> installer = new AtomicReference<>();
+		AtomicReference<Configuration> installerConfigToApply = new AtomicReference<>();
+		AtomicReference<ArtifactRef> installerArtifactToApply = new AtomicReference<>();
 		configsToRemap.forEach((sourceConfig, remappedConfig) -> {
-			/*
-			sourceConfig - The source configuration where the intermediary named artifacts come from. i.e "modApi"
-			remappedConfig - The target configuration where the remapped artifacts go
-			 */
-			final Configuration clientRemappedConfig = clientConfigsToRemap.get(sourceConfig);
-			final List<ModDependency> modDependencies = new ArrayList<>();
+			List<ArtifactRef> artifacts = resolveArtifacts(project, sourceConfig);
 
-			for (ArtifactRef artifact : resolveArtifacts(project, sourceConfig)) {
+			for (ArtifactRef artifact : artifacts) {
 				final ArtifactMetadata artifactMetadata;
 
 				artifactMetadata = metaCache.computeIfAbsent(artifact, a -> {
@@ -158,22 +168,78 @@ public class ModConfigurationRemapper {
 				});
 
 				if (artifactMetadata.installerData() != null) {
-					if (extension.getInstallerData() != null) {
-						project.getLogger().info("Found another installer JSON in ({}), ignoring", artifact.path());
+					if (installer.get() == null) {
+						installer.set(artifactMetadata);
+					} else if (!installer.get().installerData().isQuilt() && artifactMetadata.installerData().isQuilt()) {
+						// Prefer Quilt over Fabric loader
+						installer.set(artifactMetadata);
 					} else {
-						project.getLogger().info("Applying installer data from {}", artifact.path());
-						artifactMetadata.installerData().applyToProject(project);
+						project.getLogger().info("Found another installer JSON in ({}), ignoring", artifact.path());
 					}
 				}
 
 				if (!artifactMetadata.shouldRemap()) {
+					if (artifactMetadata.installerData() != null) {
+						installerConfigToApply.set(remappedConfig);
+						installerArtifactToApply.set(artifact);
+						continue; // we'll apply the installer later
+					}
+
 					// Note: not applying to any type of vanilla Gradle target config like
 					// api or implementation to fix https://github.com/FabricMC/fabric-loom/issues/572.
 					artifact.applyToConfiguration(project, remappedConfig);
 					continue;
 				}
 
-				final ModDependency modDependency = ModDependencyFactory.create(artifact, artifactMetadata, remappedConfig, clientRemappedConfig, mappingsSuffix, project);
+				if (artifact.group().startsWith("org.quiltmc.qsl")) {
+					sourceConfigsWithQsl.add(sourceConfig);
+				}
+			}
+
+			artifactsBySourceConfig.put(sourceConfig, artifacts);
+		});
+
+		boolean quiltLoader;
+
+		// Apply the installer.
+		// We do this outside Round 1, unlike Fabric Loom, because we need to prioritize Quilt Loader over Fabric Loader.
+		if (installer.get() != null) {
+			project.getLogger().info("Applying installer data");
+
+            if (installer.get().installerData().isQuilt()) {
+                quiltLoader = true;
+            } else {
+				quiltLoader = false;
+				project.getLogger().lifecycle("Warning: Quilt Loader not detected. Using Fabric Loader.");
+            }
+
+            if (!installer.get().shouldRemap()) {
+				installerArtifactToApply.get().applyToConfiguration(project, installerConfigToApply.get());
+			}
+
+			installer.get().installerData().applyToProject(project);
+		} else {
+			project.getLogger().lifecycle("Warning: No loader detected.");
+			quiltLoader = false;
+		}
+
+		// Round 1.5: Proposal
+		// Propose everything to be remapped, excluding anything we want to hide.
+		configsToRemap.forEach((sourceConfig, remappedConfig) -> {
+			/*
+			sourceConfig - The source configuration where the intermediary named artifacts come from. i.e "modApi"
+			remappedConfig - The target configuration where the remapped artifacts go
+			 */
+			final Configuration clientRemappedConfig = clientConfigsToRemap.get(sourceConfig);
+			final List<ModDependency> modDependencies = new ArrayList<>();
+
+			for (ArtifactRef artifact : artifactsBySourceConfig.get(sourceConfig)) {
+				if (quiltLoader && artifact.group().equals("net.fabricmc") && artifact.name().equals("fabric-loader")) {
+					continue;
+				} else if (sourceConfigsWithQsl.contains(sourceConfig) && artifact.group().equals("net.fabricmc.fabric-api")) {
+					continue;
+				}
+				final ModDependency modDependency = ModDependencyFactory.create(artifact, metaCache.get(artifact), remappedConfig, clientRemappedConfig, mappingsSuffix, project);
 				scheduleSourcesRemapping(project, sourceRemapper, modDependency);
 				modDependencies.add(modDependency);
 			}
