From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kneelawk <kneelawk@gmail.com>
Date: Sun, 1 May 2022 20:34:04 -0700
Subject: [PATCH] Add metadata priorities configuration


diff --git a/src/main/java/net/fabricmc/loom/LoomGradleExtension.java b/src/main/java/net/fabricmc/loom/LoomGradleExtension.java
index 0ea666cee53bd62cdf8feee0ada35c6d5ea7f589..c047822dedfcf9833ddf1ab73f9b1e4cb0722972 100644
--- a/src/main/java/net/fabricmc/loom/LoomGradleExtension.java
+++ b/src/main/java/net/fabricmc/loom/LoomGradleExtension.java
@@ -126,6 +126,6 @@ public interface LoomGradleExtension extends LoomGradleExtensionAPI {
 	 * @throws UnsupportedOperationException if the jar file has more than one kind of metadata, or the metadata that is found cannot be read.
 	 */
 	default ModMetadataHelper.Metadata readMetadataFromJar(File jar) {
-		return ModUtils.readMetadataFromJar(getModMetadataHelpers().get(), jar);
+		return ModUtils.readMetadataFromJar(getModMetadataHelpers().get(), getMetadataPriorities().get(), jar);
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java b/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java
index 70bc079382888524fa7e09ed6da528233389dee2..8668c0a4c298eafd486f39fc9ecbe054128d18f7 100644
--- a/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java
+++ b/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java
@@ -24,6 +24,8 @@
 
 package net.fabricmc.loom.api;
 
+import net.fabricmc.loom.api.metadata.MetadataPriorities;
+
 import org.gradle.api.Action;
 import org.gradle.api.NamedDomainObjectContainer;
 import org.gradle.api.artifacts.Dependency;
@@ -76,6 +78,10 @@ public interface LoomGradleExtensionAPI {
 		getModMetadataHelpers().put(api.getFileName(), api);
 	}
 
+	void metadataPriorities(Action<MetadataPriorities> action);
+
+	Property<MetadataPriorities> getMetadataPriorities();
+
 	ConfigurableFileCollection getLog4jConfigs();
 
 	Dependency officialMojangMappings();
diff --git a/src/main/java/net/fabricmc/loom/api/metadata/MetadataPriorities.java b/src/main/java/net/fabricmc/loom/api/metadata/MetadataPriorities.java
new file mode 100644
index 0000000000000000000000000000000000000000..9c550936f092b3a87bc94c1c0b083026fce66331
--- /dev/null
+++ b/src/main/java/net/fabricmc/loom/api/metadata/MetadataPriorities.java
@@ -0,0 +1,31 @@
+package net.fabricmc.loom.api.metadata;
+
+import java.io.Serializable;
+
+/**
+ * Configures different metadata file priorities.
+ * <p>
+ * The default priorities are:
+ * <ul>
+ *     <li><code>quilt.mod.json</code>: priority 1.</li>
+ *     <li><code>fabric.mod.json</code>: priority 0.</li>
+ *     <li>All other metadata kinds have a priority of -1 by default.</li>
+ * </ul>
+ */
+public interface MetadataPriorities extends Serializable {
+	/**
+	 * Sets the priority of a metadata kind by filename.
+	 *
+	 * @param filename the filename of the metadata kind to set the priority of.
+	 * @param priority the priority of the metadata kind. Higher values give higher priority.
+	 */
+	void priority(String filename, int priority);
+
+	/**
+	 * Gets the priority of a metadata kind by filename.
+	 *
+	 * @param filename the filename of the metadata kind to get the priority of.
+	 * @return the priority of the requested metadata kind.
+	 */
+	int getPriority(String filename);
+}
diff --git a/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java b/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java
index 0524795a6a4aa91e6055588a9b3b9e7235be12c7..974a9c47ca7cbd9d03b90c28dda248de2ba6531b 100644
--- a/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java
+++ b/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java
@@ -36,6 +36,9 @@ import java.util.stream.Stream;
 
 import com.google.common.base.Preconditions;
 import com.google.gson.JsonObject;
+
+import net.fabricmc.loom.api.metadata.MetadataPriorities;
+
 import org.gradle.api.UncheckedIOException;
 import org.slf4j.Logger;
 
@@ -45,7 +48,7 @@ import net.fabricmc.loom.util.Pair;
 import net.fabricmc.loom.util.ZipUtils;
 
 public class JarNester {
-	public static void nestJars(Map<String, ModMetadataHelper> helpers, Collection<File> jars, File modJar, Logger logger) {
+	public static void nestJars(Map<String, ModMetadataHelper> helpers, MetadataPriorities priorities, Collection<File> jars, File modJar, Logger logger) {
 		if (jars.isEmpty()) {
 			logger.debug("Nothing to nest into " + modJar.getName());
 			return;
@@ -69,7 +72,7 @@ public class JarNester {
 				files.add(nestedJarPath);
 			}
 
-			ModMetadataHelper helper = ModUtils.readMetadataFromJar(helpers, modJar).getParent();
+			ModMetadataHelper helper = ModUtils.readMetadataFromJar(helpers, priorities, modJar).getParent();
 
 			int count = ZipUtils.transformJson(JsonObject.class, modJar.toPath(), Stream.of(new Pair<>(helper.getFileName(), helper.addNestedJarsFunction(files))));
 
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java
index 3c272949826fd62364597466a037dac0f5878d39..054ff0d0d65348498e6db46d5a1652040c67d664 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java
@@ -31,6 +31,7 @@ import java.util.Arrays;
 import java.util.Map;
 import java.util.Objects;
 
+import net.fabricmc.loom.api.metadata.MetadataPriorities;
 import net.fabricmc.loom.configuration.ModMetadataHelper;
 import net.fabricmc.loom.util.ModUtils;
 import net.fabricmc.loom.util.ZipUtils;
@@ -43,8 +44,8 @@ public record AccessWidenerFile(
 	/**
 	 * Reads the access-widener contained in a mod jar, or returns null if there is none.
 	 */
-	public static AccessWidenerFile fromModJar(Map<String, ModMetadataHelper> helpers, Path modJarPath) {
-		ModMetadataHelper.Metadata metadata = ModUtils.readMetadataFromJar(helpers, modJarPath.toFile());
+	public static AccessWidenerFile fromModJar(Map<String, ModMetadataHelper> helpers, MetadataPriorities priorities, Path modJarPath) {
+		ModMetadataHelper.Metadata metadata = ModUtils.readMetadataFromJar(helpers, priorities, modJarPath.toFile());
 
 		if (metadata == null) {
 			return null;
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/TransitiveAccessWidenerJarProcessor.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/TransitiveAccessWidenerJarProcessor.java
index 11b6d3299239c73443084bab50bbf328b80bae93..b9bdb85071225a8c6ece29e9584339712f0895f6 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/TransitiveAccessWidenerJarProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/TransitiveAccessWidenerJarProcessor.java
@@ -118,7 +118,7 @@ public class TransitiveAccessWidenerJarProcessor implements JarProcessor {
 				continue;
 			}
 
-			AccessWidenerFile accessWidener = AccessWidenerFile.fromModJar(extension.getModMetadataHelpers().get(), path);
+			AccessWidenerFile accessWidener = AccessWidenerFile.fromModJar(extension.getModMetadataHelpers().get(), extension.getMetadataPriorities().get(), path);
 
 			if (accessWidener == null) {
 				continue;
diff --git a/src/main/java/net/fabricmc/loom/configuration/metadata/MetadataPrioritiesImpl.java b/src/main/java/net/fabricmc/loom/configuration/metadata/MetadataPrioritiesImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..23049ec78396755ef6ff38da5505b5f88816819b
--- /dev/null
+++ b/src/main/java/net/fabricmc/loom/configuration/metadata/MetadataPrioritiesImpl.java
@@ -0,0 +1,28 @@
+package net.fabricmc.loom.configuration.metadata;
+
+import net.fabricmc.loom.api.metadata.MetadataPriorities;
+
+import java.util.HashMap;
+
+public class MetadataPrioritiesImpl implements MetadataPriorities {
+	private final HashMap<String, Integer> priorities = new HashMap<>();
+
+	public MetadataPrioritiesImpl() {
+		priorities.put("quilt.mod.json", 1);
+		priorities.put("fabric.mod.json", 0);
+	}
+
+	@Override
+	public void priority(String filename, int priority) {
+		priorities.put(filename, priority);
+	}
+
+	@Override
+	public int getPriority(String filename) {
+		Integer priority = priorities.get(filename);
+		if (priority == null) {
+			return -1;
+		}
+		return priority;
+	}
+}
diff --git a/src/main/java/net/fabricmc/loom/extension/LoomGradleExtensionApiImpl.java b/src/main/java/net/fabricmc/loom/extension/LoomGradleExtensionApiImpl.java
index ec3489f478f9a17d1dad9e20fff48cba525d3c79..63ad38462a63587baa3d14bb42d2d6b79ad4260e 100644
--- a/src/main/java/net/fabricmc/loom/extension/LoomGradleExtensionApiImpl.java
+++ b/src/main/java/net/fabricmc/loom/extension/LoomGradleExtensionApiImpl.java
@@ -44,10 +44,12 @@ import net.fabricmc.loom.api.ModSettings;
 import net.fabricmc.loom.api.decompilers.DecompilerOptions;
 import net.fabricmc.loom.api.mappings.intermediate.IntermediateMappingsProvider;
 import net.fabricmc.loom.api.mappings.layered.spec.LayeredMappingSpecBuilder;
+import net.fabricmc.loom.api.metadata.MetadataPriorities;
 import net.fabricmc.loom.build.FabricModMetadataHelper;
 import net.fabricmc.loom.build.QuiltModMetadataHelper;
 import net.fabricmc.loom.configuration.ModMetadataHelper;
 import net.fabricmc.loom.configuration.ide.RunConfigSettings;
+import net.fabricmc.loom.configuration.metadata.MetadataPrioritiesImpl;
 import net.fabricmc.loom.configuration.mods.ModVersionParser;
 import net.fabricmc.loom.configuration.processors.JarProcessor;
 import net.fabricmc.loom.configuration.providers.mappings.GradleMappingContext;
@@ -78,6 +80,7 @@ public abstract class LoomGradleExtensionApiImpl implements LoomGradleExtensionA
 	private final Property<Boolean> splitEnvironmentalSourceSet;
 	private final InterfaceInjectionExtensionAPI interfaceInjectionExtension;
 	private final MapProperty<String, ModMetadataHelper> modMetadataHelpers;
+	private final Property<MetadataPriorities> metadataPriorities;
 	private final ModVersionParser versionParser;
 
 	private final NamedDomainObjectContainer<RunConfigSettings> runConfigs;
@@ -136,6 +139,9 @@ public abstract class LoomGradleExtensionApiImpl implements LoomGradleExtensionA
 		this.addModMetadataHelper(new QuiltModMetadataHelper());
 		this.modMetadataHelpers.finalizeValueOnRead();
 
+		this.metadataPriorities = project.getObjects().property(MetadataPriorities.class).convention(new MetadataPrioritiesImpl());
+		this.metadataPriorities.finalizeValueOnRead();
+
 		// Add main source set by default
 		interfaceInjection(interfaceInjection -> {
 			final JavaPluginExtension javaPluginExtension = project.getExtensions().getByType(JavaPluginExtension.class);
@@ -190,6 +196,16 @@ public abstract class LoomGradleExtensionApiImpl implements LoomGradleExtensionA
 		return modMetadataHelpers;
 	}
 
+	@Override
+	public void metadataPriorities(Action<MetadataPriorities> action) {
+		action.execute(metadataPriorities.get());
+	}
+
+	@Override
+	public Property<MetadataPriorities> getMetadataPriorities() {
+		return metadataPriorities;
+	}
+
 	@Override
 	public Dependency layered(Action<LayeredMappingSpecBuilder> action) {
 		LayeredMappingSpecBuilderImpl builder = new LayeredMappingSpecBuilderImpl();
diff --git a/src/main/java/net/fabricmc/loom/task/RemapJarTask.java b/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
index 0bd3de20b38ff937825dd518ba90537fc2af525e..10629034c62d64be1a22b6be4d2e2ea72ae292a1 100644
--- a/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
+++ b/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
@@ -47,6 +47,9 @@ import javax.inject.Inject;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Suppliers;
 import com.google.gson.JsonObject;
+
+import net.fabricmc.loom.api.metadata.MetadataPriorities;
+
 import org.gradle.api.artifacts.Configuration;
 import org.gradle.api.file.ConfigurableFileCollection;
 import org.gradle.api.file.FileCollection;
@@ -140,6 +143,7 @@ public abstract class RemapJarTask extends AbstractRemapJarTask {
 			final boolean legacyMixin = extension.getMixin().getUseLegacyMixinAp().get();
 			params.getUseMixinExtension().set(!legacyMixin);
 			params.getMetadataHelpers().set(extension.getModMetadataHelpers());
+			params.getMetadataPriorities().set(extension.getMetadataPriorities());
 
 			if (legacyMixin) {
 				setupLegacyMixinRefmapRemapping(params);
@@ -205,6 +209,7 @@ public abstract class RemapJarTask extends AbstractRemapJarTask {
 		MapProperty<String, String> getManifestAttributes();
 		ListProperty<String> getClientOnlyClasses();
 		MapProperty<String, ModMetadataHelper> getMetadataHelpers();
+		Property<MetadataPriorities> getMetadataPriorities();
 	}
 
 	public abstract static class RemapAction extends AbstractRemapAction<RemapParams> {
@@ -265,7 +270,7 @@ public abstract class RemapJarTask extends AbstractRemapJarTask {
 		}
 
 		private void remapAccessWidener() throws IOException {
-			final AccessWidenerFile accessWidenerFile = AccessWidenerFile.fromModJar(getParameters().getMetadataHelpers().get(), inputFile);
+			final AccessWidenerFile accessWidenerFile = AccessWidenerFile.fromModJar(getParameters().getMetadataHelpers().get(), getParameters().getMetadataPriorities().get(), inputFile);
 
 			if (accessWidenerFile == null) {
 				return;
@@ -301,7 +306,7 @@ public abstract class RemapJarTask extends AbstractRemapJarTask {
 				return;
 			}
 
-			JarNester.nestJars(this.getParameters().getMetadataHelpers().get(), nestedJars.getFiles(), outputFile.toFile(), LOGGER);
+			JarNester.nestJars(this.getParameters().getMetadataHelpers().get(), this.getParameters().getMetadataPriorities().get(), nestedJars.getFiles(), outputFile.toFile(), LOGGER);
 		}
 
 		private void modifyJarManifest() throws IOException {
diff --git a/src/main/java/net/fabricmc/loom/util/ModUtils.java b/src/main/java/net/fabricmc/loom/util/ModUtils.java
index 7109ad9219c00966f000a68acdac41fb8a464d99..97ac359a898c343c01e895c659efe778cdc58bce 100644
--- a/src/main/java/net/fabricmc/loom/util/ModUtils.java
+++ b/src/main/java/net/fabricmc/loom/util/ModUtils.java
@@ -32,14 +32,10 @@ import java.util.Map;
 import java.util.zip.ZipFile;
 
 import net.fabricmc.loom.api.LoomGradleExtensionAPI;
+import net.fabricmc.loom.api.metadata.MetadataPriorities;
 import net.fabricmc.loom.configuration.ModMetadataHelper;
 
 public final class ModUtils {
-	/**
-	 * Priority of different metadata types. Later metadatas have a higher priority.
-	 */
-	private static final List<String> METADATA_PRIORITY = List.of("fabric.mod.json", "quilt.mod.json");
-
 	private ModUtils() {
 	}
 
@@ -55,13 +51,13 @@ public final class ModUtils {
 	 * @throws UnsupportedOperationException if the metadata that is found cannot be read.
 	 */
 	public static ModMetadataHelper.Metadata readMetadataFromJar(LoomGradleExtensionAPI ext, File jar) {
-		return ModUtils.readMetadataFromJar(ext.getModMetadataHelpers().get(), jar);
+		return ModUtils.readMetadataFromJar(ext.getModMetadataHelpers().get(), ext.getMetadataPriorities().get(), jar);
 	}
 
 	/**
 	 * @throws UnsupportedOperationException if the metadata that is found cannot be read.
 	 */
-	public static ModMetadataHelper.Metadata readMetadataFromJar(Map<String, ModMetadataHelper> helpers, File jar) {
+	public static ModMetadataHelper.Metadata readMetadataFromJar(Map<String, ModMetadataHelper> helpers, MetadataPriorities priorities, File jar) {
 		try (var zip = new ZipFile(jar)) {
 			List<String> entries = helpers.keySet()
 					.stream()
@@ -76,10 +72,10 @@ public final class ModUtils {
 			String fileName = entries.get(0);
 
 			if (entries.size() > 1) {
-				int curPriority = METADATA_PRIORITY.indexOf(fileName);
+				int curPriority = priorities.getPriority(fileName);
 
 				for (String entry : entries) {
-					int newPriority = METADATA_PRIORITY.indexOf(entry);
+					int newPriority = priorities.getPriority(entry);
 
 					if (newPriority > curPriority) {
 						curPriority = newPriority;
